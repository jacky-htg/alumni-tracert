// source: single-proto.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.proto.Alumni', null, global);
goog.exportSymbol('proto.proto.AlumniAppraiser', null, global);
goog.exportSymbol('proto.proto.AlumniAppraiserListResponse', null, global);
goog.exportSymbol('proto.proto.AlumniKuisioner', null, global);
goog.exportSymbol('proto.proto.AlumniListResponse', null, global);
goog.exportSymbol('proto.proto.AlumniRegistrationInput', null, global);
goog.exportSymbol('proto.proto.Answer', null, global);
goog.exportSymbol('proto.proto.Certificate', null, global);
goog.exportSymbol('proto.proto.Certificates', null, global);
goog.exportSymbol('proto.proto.ChangePassword', null, global);
goog.exportSymbol('proto.proto.EmptyMessage', null, global);
goog.exportSymbol('proto.proto.Legalize', null, global);
goog.exportSymbol('proto.proto.LegalizeListResponse', null, global);
goog.exportSymbol('proto.proto.Legalizes', null, global);
goog.exportSymbol('proto.proto.ListInput', null, global);
goog.exportSymbol('proto.proto.LoginInput', null, global);
goog.exportSymbol('proto.proto.Question', null, global);
goog.exportSymbol('proto.proto.QuestionGroup', null, global);
goog.exportSymbol('proto.proto.QuestionGroupList', null, global);
goog.exportSymbol('proto.proto.QuestionGroupListInput', null, global);
goog.exportSymbol('proto.proto.QuestionOption', null, global);
goog.exportSymbol('proto.proto.StringMessage', null, global);
goog.exportSymbol('proto.proto.Tracer', null, global);
goog.exportSymbol('proto.proto.TracerList', null, global);
goog.exportSymbol('proto.proto.UintMessage', null, global);
goog.exportSymbol('proto.proto.User', null, global);
goog.exportSymbol('proto.proto.UserAnswer', null, global);
goog.exportSymbol('proto.proto.UserListResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.AlumniAppraiser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.AlumniAppraiser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.AlumniAppraiser.displayName = 'proto.proto.AlumniAppraiser';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.AlumniAppraiserListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.AlumniAppraiserListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.AlumniAppraiserListResponse.displayName = 'proto.proto.AlumniAppraiserListResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Alumni = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.Alumni.repeatedFields_, null);
};
goog.inherits(proto.proto.Alumni, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Alumni.displayName = 'proto.proto.Alumni';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.AlumniListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.AlumniListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.AlumniListResponse.displayName = 'proto.proto.AlumniListResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Certificate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Certificate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Certificate.displayName = 'proto.proto.Certificate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Certificates = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.Certificates.repeatedFields_, null);
};
goog.inherits(proto.proto.Certificates, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Certificates.displayName = 'proto.proto.Certificates';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.EmptyMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.EmptyMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.EmptyMessage.displayName = 'proto.proto.EmptyMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.StringMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.StringMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.StringMessage.displayName = 'proto.proto.StringMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.UintMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.UintMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.UintMessage.displayName = 'proto.proto.UintMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ListInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ListInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.ListInput.displayName = 'proto.proto.ListInput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Legalize = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Legalize, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Legalize.displayName = 'proto.proto.Legalize';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.LegalizeListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.LegalizeListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.LegalizeListResponse.displayName = 'proto.proto.LegalizeListResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Legalizes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.Legalizes.repeatedFields_, null);
};
goog.inherits(proto.proto.Legalizes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Legalizes.displayName = 'proto.proto.Legalizes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.QuestionGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.QuestionGroup.repeatedFields_, null);
};
goog.inherits(proto.proto.QuestionGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.QuestionGroup.displayName = 'proto.proto.QuestionGroup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.QuestionGroupList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.QuestionGroupList.repeatedFields_, null);
};
goog.inherits(proto.proto.QuestionGroupList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.QuestionGroupList.displayName = 'proto.proto.QuestionGroupList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.QuestionGroupListInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.QuestionGroupListInput.repeatedFields_, null);
};
goog.inherits(proto.proto.QuestionGroupListInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.QuestionGroupListInput.displayName = 'proto.proto.QuestionGroupListInput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Question = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.Question.repeatedFields_, null);
};
goog.inherits(proto.proto.Question, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Question.displayName = 'proto.proto.Question';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.QuestionOption = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.QuestionOption, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.QuestionOption.displayName = 'proto.proto.QuestionOption';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Tracer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Tracer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Tracer.displayName = 'proto.proto.Tracer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.UserAnswer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.UserAnswer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.UserAnswer.displayName = 'proto.proto.UserAnswer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.AlumniKuisioner = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.AlumniKuisioner.repeatedFields_, null);
};
goog.inherits(proto.proto.AlumniKuisioner, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.AlumniKuisioner.displayName = 'proto.proto.AlumniKuisioner';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Answer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Answer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Answer.displayName = 'proto.proto.Answer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.TracerList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.TracerList.repeatedFields_, null);
};
goog.inherits(proto.proto.TracerList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.TracerList.displayName = 'proto.proto.TracerList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.User.repeatedFields_, null);
};
goog.inherits(proto.proto.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.User.displayName = 'proto.proto.User';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.UserListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.UserListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.UserListResponse.displayName = 'proto.proto.UserListResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ChangePassword = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ChangePassword, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.ChangePassword.displayName = 'proto.proto.ChangePassword';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.LoginInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.LoginInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.LoginInput.displayName = 'proto.proto.LoginInput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.AlumniRegistrationInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.AlumniRegistrationInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.AlumniRegistrationInput.displayName = 'proto.proto.AlumniRegistrationInput';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.AlumniAppraiser.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.AlumniAppraiser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.AlumniAppraiser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.AlumniAppraiser.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    alumni: (f = msg.getAlumni()) && proto.proto.Alumni.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    instansi: jspb.Message.getFieldWithDefault(msg, 5, ""),
    position: jspb.Message.getFieldWithDefault(msg, 6, ""),
    alumniPosition: jspb.Message.getFieldWithDefault(msg, 7, ""),
    created: jspb.Message.getFieldWithDefault(msg, 8, ""),
    updated: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.AlumniAppraiser}
 */
proto.proto.AlumniAppraiser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.AlumniAppraiser;
  return proto.proto.AlumniAppraiser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.AlumniAppraiser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.AlumniAppraiser}
 */
proto.proto.AlumniAppraiser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 3:
      var value = new proto.proto.Alumni;
      reader.readMessage(value,proto.proto.Alumni.deserializeBinaryFromReader);
      msg.setAlumni(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setInstansi(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPosition(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlumniPosition(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreated(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.AlumniAppraiser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.AlumniAppraiser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.AlumniAppraiser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.AlumniAppraiser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getAlumni();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.proto.Alumni.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getInstansi();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPosition();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getAlumniPosition();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getCreated();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getUpdated();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.proto.AlumniAppraiser.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.AlumniAppraiser} returns this
 */
proto.proto.AlumniAppraiser.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 user_id = 2;
 * @return {number}
 */
proto.proto.AlumniAppraiser.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.AlumniAppraiser} returns this
 */
proto.proto.AlumniAppraiser.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Alumni alumni = 3;
 * @return {?proto.proto.Alumni}
 */
proto.proto.AlumniAppraiser.prototype.getAlumni = function() {
  return /** @type{?proto.proto.Alumni} */ (
    jspb.Message.getWrapperField(this, proto.proto.Alumni, 3));
};


/**
 * @param {?proto.proto.Alumni|undefined} value
 * @return {!proto.proto.AlumniAppraiser} returns this
*/
proto.proto.AlumniAppraiser.prototype.setAlumni = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.AlumniAppraiser} returns this
 */
proto.proto.AlumniAppraiser.prototype.clearAlumni = function() {
  return this.setAlumni(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.AlumniAppraiser.prototype.hasAlumni = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.proto.AlumniAppraiser.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.AlumniAppraiser} returns this
 */
proto.proto.AlumniAppraiser.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string instansi = 5;
 * @return {string}
 */
proto.proto.AlumniAppraiser.prototype.getInstansi = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.AlumniAppraiser} returns this
 */
proto.proto.AlumniAppraiser.prototype.setInstansi = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string position = 6;
 * @return {string}
 */
proto.proto.AlumniAppraiser.prototype.getPosition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.AlumniAppraiser} returns this
 */
proto.proto.AlumniAppraiser.prototype.setPosition = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string alumni_position = 7;
 * @return {string}
 */
proto.proto.AlumniAppraiser.prototype.getAlumniPosition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.AlumniAppraiser} returns this
 */
proto.proto.AlumniAppraiser.prototype.setAlumniPosition = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string created = 8;
 * @return {string}
 */
proto.proto.AlumniAppraiser.prototype.getCreated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.AlumniAppraiser} returns this
 */
proto.proto.AlumniAppraiser.prototype.setCreated = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string updated = 9;
 * @return {string}
 */
proto.proto.AlumniAppraiser.prototype.getUpdated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.AlumniAppraiser} returns this
 */
proto.proto.AlumniAppraiser.prototype.setUpdated = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.AlumniAppraiserListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.AlumniAppraiserListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.AlumniAppraiserListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.AlumniAppraiserListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    alumniAppraiser: (f = msg.getAlumniAppraiser()) && proto.proto.AlumniAppraiser.toObject(includeInstance, f),
    listInput: (f = msg.getListInput()) && proto.proto.ListInput.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.AlumniAppraiserListResponse}
 */
proto.proto.AlumniAppraiserListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.AlumniAppraiserListResponse;
  return proto.proto.AlumniAppraiserListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.AlumniAppraiserListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.AlumniAppraiserListResponse}
 */
proto.proto.AlumniAppraiserListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.AlumniAppraiser;
      reader.readMessage(value,proto.proto.AlumniAppraiser.deserializeBinaryFromReader);
      msg.setAlumniAppraiser(value);
      break;
    case 2:
      var value = new proto.proto.ListInput;
      reader.readMessage(value,proto.proto.ListInput.deserializeBinaryFromReader);
      msg.setListInput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.AlumniAppraiserListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.AlumniAppraiserListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.AlumniAppraiserListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.AlumniAppraiserListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAlumniAppraiser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.AlumniAppraiser.serializeBinaryToWriter
    );
  }
  f = message.getListInput();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.ListInput.serializeBinaryToWriter
    );
  }
};


/**
 * optional AlumniAppraiser alumni_appraiser = 1;
 * @return {?proto.proto.AlumniAppraiser}
 */
proto.proto.AlumniAppraiserListResponse.prototype.getAlumniAppraiser = function() {
  return /** @type{?proto.proto.AlumniAppraiser} */ (
    jspb.Message.getWrapperField(this, proto.proto.AlumniAppraiser, 1));
};


/**
 * @param {?proto.proto.AlumniAppraiser|undefined} value
 * @return {!proto.proto.AlumniAppraiserListResponse} returns this
*/
proto.proto.AlumniAppraiserListResponse.prototype.setAlumniAppraiser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.AlumniAppraiserListResponse} returns this
 */
proto.proto.AlumniAppraiserListResponse.prototype.clearAlumniAppraiser = function() {
  return this.setAlumniAppraiser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.AlumniAppraiserListResponse.prototype.hasAlumniAppraiser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ListInput list_input = 2;
 * @return {?proto.proto.ListInput}
 */
proto.proto.AlumniAppraiserListResponse.prototype.getListInput = function() {
  return /** @type{?proto.proto.ListInput} */ (
    jspb.Message.getWrapperField(this, proto.proto.ListInput, 2));
};


/**
 * @param {?proto.proto.ListInput|undefined} value
 * @return {!proto.proto.AlumniAppraiserListResponse} returns this
*/
proto.proto.AlumniAppraiserListResponse.prototype.setListInput = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.AlumniAppraiserListResponse} returns this
 */
proto.proto.AlumniAppraiserListResponse.prototype.clearListInput = function() {
  return this.setListInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.AlumniAppraiserListResponse.prototype.hasListInput = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.Alumni.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Alumni.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Alumni.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Alumni} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Alumni.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    nik: jspb.Message.getFieldWithDefault(msg, 4, ""),
    placeOfBirth: jspb.Message.getFieldWithDefault(msg, 5, ""),
    dateOfBirth: jspb.Message.getFieldWithDefault(msg, 6, ""),
    phone: jspb.Message.getFieldWithDefault(msg, 7, ""),
    certificatesList: jspb.Message.toObjectList(msg.getCertificatesList(),
    proto.proto.Certificate.toObject, includeInstance),
    created: jspb.Message.getFieldWithDefault(msg, 9, ""),
    updated: jspb.Message.getFieldWithDefault(msg, 10, ""),
    email: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Alumni}
 */
proto.proto.Alumni.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Alumni;
  return proto.proto.Alumni.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Alumni} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Alumni}
 */
proto.proto.Alumni.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNik(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlaceOfBirth(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDateOfBirth(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    case 8:
      var value = new proto.proto.Certificate;
      reader.readMessage(value,proto.proto.Certificate.deserializeBinaryFromReader);
      msg.addCertificates(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreated(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdated(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Alumni.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Alumni.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Alumni} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Alumni.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNik();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPlaceOfBirth();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDateOfBirth();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPhone();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getCertificatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.proto.Certificate.serializeBinaryToWriter
    );
  }
  f = message.getCreated();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getUpdated();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.proto.Alumni.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Alumni} returns this
 */
proto.proto.Alumni.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 user_id = 2;
 * @return {number}
 */
proto.proto.Alumni.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Alumni} returns this
 */
proto.proto.Alumni.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.proto.Alumni.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Alumni} returns this
 */
proto.proto.Alumni.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string nik = 4;
 * @return {string}
 */
proto.proto.Alumni.prototype.getNik = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Alumni} returns this
 */
proto.proto.Alumni.prototype.setNik = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string place_of_birth = 5;
 * @return {string}
 */
proto.proto.Alumni.prototype.getPlaceOfBirth = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Alumni} returns this
 */
proto.proto.Alumni.prototype.setPlaceOfBirth = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string date_of_birth = 6;
 * @return {string}
 */
proto.proto.Alumni.prototype.getDateOfBirth = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Alumni} returns this
 */
proto.proto.Alumni.prototype.setDateOfBirth = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string phone = 7;
 * @return {string}
 */
proto.proto.Alumni.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Alumni} returns this
 */
proto.proto.Alumni.prototype.setPhone = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * repeated Certificate certificates = 8;
 * @return {!Array<!proto.proto.Certificate>}
 */
proto.proto.Alumni.prototype.getCertificatesList = function() {
  return /** @type{!Array<!proto.proto.Certificate>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Certificate, 8));
};


/**
 * @param {!Array<!proto.proto.Certificate>} value
 * @return {!proto.proto.Alumni} returns this
*/
proto.proto.Alumni.prototype.setCertificatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.proto.Certificate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.Certificate}
 */
proto.proto.Alumni.prototype.addCertificates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.proto.Certificate, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.Alumni} returns this
 */
proto.proto.Alumni.prototype.clearCertificatesList = function() {
  return this.setCertificatesList([]);
};


/**
 * optional string created = 9;
 * @return {string}
 */
proto.proto.Alumni.prototype.getCreated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Alumni} returns this
 */
proto.proto.Alumni.prototype.setCreated = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string updated = 10;
 * @return {string}
 */
proto.proto.Alumni.prototype.getUpdated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Alumni} returns this
 */
proto.proto.Alumni.prototype.setUpdated = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string email = 11;
 * @return {string}
 */
proto.proto.Alumni.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Alumni} returns this
 */
proto.proto.Alumni.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.AlumniListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.AlumniListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.AlumniListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.AlumniListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    alumni: (f = msg.getAlumni()) && proto.proto.Alumni.toObject(includeInstance, f),
    listInput: (f = msg.getListInput()) && proto.proto.ListInput.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.AlumniListResponse}
 */
proto.proto.AlumniListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.AlumniListResponse;
  return proto.proto.AlumniListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.AlumniListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.AlumniListResponse}
 */
proto.proto.AlumniListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Alumni;
      reader.readMessage(value,proto.proto.Alumni.deserializeBinaryFromReader);
      msg.setAlumni(value);
      break;
    case 2:
      var value = new proto.proto.ListInput;
      reader.readMessage(value,proto.proto.ListInput.deserializeBinaryFromReader);
      msg.setListInput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.AlumniListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.AlumniListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.AlumniListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.AlumniListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAlumni();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.Alumni.serializeBinaryToWriter
    );
  }
  f = message.getListInput();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.ListInput.serializeBinaryToWriter
    );
  }
};


/**
 * optional Alumni alumni = 1;
 * @return {?proto.proto.Alumni}
 */
proto.proto.AlumniListResponse.prototype.getAlumni = function() {
  return /** @type{?proto.proto.Alumni} */ (
    jspb.Message.getWrapperField(this, proto.proto.Alumni, 1));
};


/**
 * @param {?proto.proto.Alumni|undefined} value
 * @return {!proto.proto.AlumniListResponse} returns this
*/
proto.proto.AlumniListResponse.prototype.setAlumni = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.AlumniListResponse} returns this
 */
proto.proto.AlumniListResponse.prototype.clearAlumni = function() {
  return this.setAlumni(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.AlumniListResponse.prototype.hasAlumni = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ListInput list_input = 2;
 * @return {?proto.proto.ListInput}
 */
proto.proto.AlumniListResponse.prototype.getListInput = function() {
  return /** @type{?proto.proto.ListInput} */ (
    jspb.Message.getWrapperField(this, proto.proto.ListInput, 2));
};


/**
 * @param {?proto.proto.ListInput|undefined} value
 * @return {!proto.proto.AlumniListResponse} returns this
*/
proto.proto.AlumniListResponse.prototype.setListInput = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.AlumniListResponse} returns this
 */
proto.proto.AlumniListResponse.prototype.clearListInput = function() {
  return this.setListInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.AlumniListResponse.prototype.hasListInput = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Certificate.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Certificate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Certificate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Certificate.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    alumniId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    nim: jspb.Message.getFieldWithDefault(msg, 3, ""),
    majorStudy: jspb.Message.getFieldWithDefault(msg, 4, ""),
    entryYear: jspb.Message.getFieldWithDefault(msg, 5, 0),
    graduationYear: jspb.Message.getFieldWithDefault(msg, 6, 0),
    noIjazah: jspb.Message.getFieldWithDefault(msg, 7, ""),
    created: jspb.Message.getFieldWithDefault(msg, 8, ""),
    updated: jspb.Message.getFieldWithDefault(msg, 9, ""),
    legalize: (f = msg.getLegalize()) && proto.proto.Legalize.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Certificate}
 */
proto.proto.Certificate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Certificate;
  return proto.proto.Certificate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Certificate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Certificate}
 */
proto.proto.Certificate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAlumniId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNim(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMajorStudy(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEntryYear(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGraduationYear(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setNoIjazah(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreated(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdated(value);
      break;
    case 10:
      var value = new proto.proto.Legalize;
      reader.readMessage(value,proto.proto.Legalize.deserializeBinaryFromReader);
      msg.setLegalize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Certificate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Certificate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Certificate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Certificate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getAlumniId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getNim();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMajorStudy();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEntryYear();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getGraduationYear();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getNoIjazah();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getCreated();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getUpdated();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getLegalize();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.proto.Legalize.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.proto.Certificate.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Certificate} returns this
 */
proto.proto.Certificate.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 alumni_id = 2;
 * @return {number}
 */
proto.proto.Certificate.prototype.getAlumniId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Certificate} returns this
 */
proto.proto.Certificate.prototype.setAlumniId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string nim = 3;
 * @return {string}
 */
proto.proto.Certificate.prototype.getNim = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Certificate} returns this
 */
proto.proto.Certificate.prototype.setNim = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string major_study = 4;
 * @return {string}
 */
proto.proto.Certificate.prototype.getMajorStudy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Certificate} returns this
 */
proto.proto.Certificate.prototype.setMajorStudy = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint32 entry_year = 5;
 * @return {number}
 */
proto.proto.Certificate.prototype.getEntryYear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Certificate} returns this
 */
proto.proto.Certificate.prototype.setEntryYear = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 graduation_year = 6;
 * @return {number}
 */
proto.proto.Certificate.prototype.getGraduationYear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Certificate} returns this
 */
proto.proto.Certificate.prototype.setGraduationYear = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string no_ijazah = 7;
 * @return {string}
 */
proto.proto.Certificate.prototype.getNoIjazah = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Certificate} returns this
 */
proto.proto.Certificate.prototype.setNoIjazah = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string created = 8;
 * @return {string}
 */
proto.proto.Certificate.prototype.getCreated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Certificate} returns this
 */
proto.proto.Certificate.prototype.setCreated = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string updated = 9;
 * @return {string}
 */
proto.proto.Certificate.prototype.getUpdated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Certificate} returns this
 */
proto.proto.Certificate.prototype.setUpdated = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional Legalize legalize = 10;
 * @return {?proto.proto.Legalize}
 */
proto.proto.Certificate.prototype.getLegalize = function() {
  return /** @type{?proto.proto.Legalize} */ (
    jspb.Message.getWrapperField(this, proto.proto.Legalize, 10));
};


/**
 * @param {?proto.proto.Legalize|undefined} value
 * @return {!proto.proto.Certificate} returns this
*/
proto.proto.Certificate.prototype.setLegalize = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.Certificate} returns this
 */
proto.proto.Certificate.prototype.clearLegalize = function() {
  return this.setLegalize(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Certificate.prototype.hasLegalize = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.Certificates.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Certificates.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Certificates.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Certificates} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Certificates.toObject = function(includeInstance, msg) {
  var f, obj = {
    certificateList: jspb.Message.toObjectList(msg.getCertificateList(),
    proto.proto.Certificate.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Certificates}
 */
proto.proto.Certificates.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Certificates;
  return proto.proto.Certificates.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Certificates} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Certificates}
 */
proto.proto.Certificates.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Certificate;
      reader.readMessage(value,proto.proto.Certificate.deserializeBinaryFromReader);
      msg.addCertificate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Certificates.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Certificates.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Certificates} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Certificates.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCertificateList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.Certificate.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Certificate certificate = 1;
 * @return {!Array<!proto.proto.Certificate>}
 */
proto.proto.Certificates.prototype.getCertificateList = function() {
  return /** @type{!Array<!proto.proto.Certificate>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Certificate, 1));
};


/**
 * @param {!Array<!proto.proto.Certificate>} value
 * @return {!proto.proto.Certificates} returns this
*/
proto.proto.Certificates.prototype.setCertificateList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.Certificate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.Certificate}
 */
proto.proto.Certificates.prototype.addCertificate = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.Certificate, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.Certificates} returns this
 */
proto.proto.Certificates.prototype.clearCertificateList = function() {
  return this.setCertificateList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.EmptyMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.EmptyMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.EmptyMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.EmptyMessage.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.EmptyMessage}
 */
proto.proto.EmptyMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.EmptyMessage;
  return proto.proto.EmptyMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.EmptyMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.EmptyMessage}
 */
proto.proto.EmptyMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.EmptyMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.EmptyMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.EmptyMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.EmptyMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.StringMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.StringMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.StringMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.StringMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.StringMessage}
 */
proto.proto.StringMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.StringMessage;
  return proto.proto.StringMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.StringMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.StringMessage}
 */
proto.proto.StringMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.StringMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.StringMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.StringMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.StringMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string data = 1;
 * @return {string}
 */
proto.proto.StringMessage.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.StringMessage} returns this
 */
proto.proto.StringMessage.prototype.setData = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.UintMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.UintMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.UintMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UintMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.UintMessage}
 */
proto.proto.UintMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.UintMessage;
  return proto.proto.UintMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.UintMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.UintMessage}
 */
proto.proto.UintMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.UintMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.UintMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.UintMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UintMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 data = 1;
 * @return {number}
 */
proto.proto.UintMessage.prototype.getData = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.UintMessage} returns this
 */
proto.proto.UintMessage.prototype.setData = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ListInput.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ListInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ListInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ListInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    search: jspb.Message.getFieldWithDefault(msg, 1, ""),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0),
    page: jspb.Message.getFieldWithDefault(msg, 3, 0),
    orderBy: jspb.Message.getFieldWithDefault(msg, 4, ""),
    sort: jspb.Message.getFieldWithDefault(msg, 5, ""),
    count: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ListInput}
 */
proto.proto.ListInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ListInput;
  return proto.proto.ListInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ListInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ListInput}
 */
proto.proto.ListInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSearch(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPage(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrderBy(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSort(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ListInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ListInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ListInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ListInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSearch();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getPage();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getOrderBy();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSort();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional string search = 1;
 * @return {string}
 */
proto.proto.ListInput.prototype.getSearch = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.ListInput} returns this
 */
proto.proto.ListInput.prototype.setSearch = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 limit = 2;
 * @return {number}
 */
proto.proto.ListInput.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.ListInput} returns this
 */
proto.proto.ListInput.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 page = 3;
 * @return {number}
 */
proto.proto.ListInput.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.ListInput} returns this
 */
proto.proto.ListInput.prototype.setPage = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string order_by = 4;
 * @return {string}
 */
proto.proto.ListInput.prototype.getOrderBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.ListInput} returns this
 */
proto.proto.ListInput.prototype.setOrderBy = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string sort = 5;
 * @return {string}
 */
proto.proto.ListInput.prototype.getSort = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.ListInput} returns this
 */
proto.proto.ListInput.prototype.setSort = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint32 count = 6;
 * @return {number}
 */
proto.proto.ListInput.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.ListInput} returns this
 */
proto.proto.ListInput.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Legalize.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Legalize.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Legalize} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Legalize.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    alumniId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    certificateId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    ijazah: jspb.Message.getFieldWithDefault(msg, 4, ""),
    transcript: jspb.Message.getFieldWithDefault(msg, 5, ""),
    isOffline: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    isVerified: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    isApproved: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    verifiedBy: jspb.Message.getFieldWithDefault(msg, 9, 0),
    approvedBy: jspb.Message.getFieldWithDefault(msg, 10, 0),
    verifiedAt: jspb.Message.getFieldWithDefault(msg, 11, ""),
    approvedAt: jspb.Message.getFieldWithDefault(msg, 12, ""),
    ijazahSigned: jspb.Message.getFieldWithDefault(msg, 13, ""),
    transcriptSigned: jspb.Message.getFieldWithDefault(msg, 14, ""),
    status: jspb.Message.getFieldWithDefault(msg, 15, 0),
    rating: jspb.Message.getFieldWithDefault(msg, 16, 0),
    rejectedReason: jspb.Message.getFieldWithDefault(msg, 17, ""),
    created: jspb.Message.getFieldWithDefault(msg, 18, ""),
    updated: jspb.Message.getFieldWithDefault(msg, 19, ""),
    alumniName: jspb.Message.getFieldWithDefault(msg, 20, ""),
    alumniEmail: jspb.Message.getFieldWithDefault(msg, 21, ""),
    noIjazah: jspb.Message.getFieldWithDefault(msg, 22, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Legalize}
 */
proto.proto.Legalize.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Legalize;
  return proto.proto.Legalize.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Legalize} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Legalize}
 */
proto.proto.Legalize.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAlumniId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCertificateId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setIjazah(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTranscript(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsOffline(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsVerified(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsApproved(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVerifiedBy(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setApprovedBy(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerifiedAt(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setApprovedAt(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setIjazahSigned(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setTranscriptSigned(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStatus(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRating(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setRejectedReason(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreated(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdated(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlumniName(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlumniEmail(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setNoIjazah(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Legalize.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Legalize.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Legalize} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Legalize.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAlumniId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getCertificateId();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getIjazah();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTranscript();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getIsOffline();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getIsVerified();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getIsApproved();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getVerifiedBy();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getApprovedBy();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getVerifiedAt();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getApprovedAt();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getIjazahSigned();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getTranscriptSigned();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0) {
    writer.writeUint32(
      15,
      f
    );
  }
  f = message.getRating();
  if (f !== 0) {
    writer.writeUint32(
      16,
      f
    );
  }
  f = message.getRejectedReason();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getCreated();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getUpdated();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = message.getAlumniName();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getAlumniEmail();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = message.getNoIjazah();
  if (f.length > 0) {
    writer.writeString(
      22,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.proto.Legalize.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Legalize} returns this
 */
proto.proto.Legalize.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 alumni_id = 2;
 * @return {number}
 */
proto.proto.Legalize.prototype.getAlumniId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Legalize} returns this
 */
proto.proto.Legalize.prototype.setAlumniId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 certificate_id = 3;
 * @return {number}
 */
proto.proto.Legalize.prototype.getCertificateId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Legalize} returns this
 */
proto.proto.Legalize.prototype.setCertificateId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string ijazah = 4;
 * @return {string}
 */
proto.proto.Legalize.prototype.getIjazah = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Legalize} returns this
 */
proto.proto.Legalize.prototype.setIjazah = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string transcript = 5;
 * @return {string}
 */
proto.proto.Legalize.prototype.getTranscript = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Legalize} returns this
 */
proto.proto.Legalize.prototype.setTranscript = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool is_offline = 6;
 * @return {boolean}
 */
proto.proto.Legalize.prototype.getIsOffline = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.Legalize} returns this
 */
proto.proto.Legalize.prototype.setIsOffline = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool is_verified = 7;
 * @return {boolean}
 */
proto.proto.Legalize.prototype.getIsVerified = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.Legalize} returns this
 */
proto.proto.Legalize.prototype.setIsVerified = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool is_approved = 8;
 * @return {boolean}
 */
proto.proto.Legalize.prototype.getIsApproved = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.Legalize} returns this
 */
proto.proto.Legalize.prototype.setIsApproved = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional uint64 verified_by = 9;
 * @return {number}
 */
proto.proto.Legalize.prototype.getVerifiedBy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Legalize} returns this
 */
proto.proto.Legalize.prototype.setVerifiedBy = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint64 approved_by = 10;
 * @return {number}
 */
proto.proto.Legalize.prototype.getApprovedBy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Legalize} returns this
 */
proto.proto.Legalize.prototype.setApprovedBy = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional string verified_at = 11;
 * @return {string}
 */
proto.proto.Legalize.prototype.getVerifiedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Legalize} returns this
 */
proto.proto.Legalize.prototype.setVerifiedAt = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string approved_at = 12;
 * @return {string}
 */
proto.proto.Legalize.prototype.getApprovedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Legalize} returns this
 */
proto.proto.Legalize.prototype.setApprovedAt = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string ijazah_signed = 13;
 * @return {string}
 */
proto.proto.Legalize.prototype.getIjazahSigned = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Legalize} returns this
 */
proto.proto.Legalize.prototype.setIjazahSigned = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string transcript_signed = 14;
 * @return {string}
 */
proto.proto.Legalize.prototype.getTranscriptSigned = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Legalize} returns this
 */
proto.proto.Legalize.prototype.setTranscriptSigned = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional uint32 status = 15;
 * @return {number}
 */
proto.proto.Legalize.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Legalize} returns this
 */
proto.proto.Legalize.prototype.setStatus = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional uint32 rating = 16;
 * @return {number}
 */
proto.proto.Legalize.prototype.getRating = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Legalize} returns this
 */
proto.proto.Legalize.prototype.setRating = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional string rejected_reason = 17;
 * @return {string}
 */
proto.proto.Legalize.prototype.getRejectedReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Legalize} returns this
 */
proto.proto.Legalize.prototype.setRejectedReason = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional string created = 18;
 * @return {string}
 */
proto.proto.Legalize.prototype.getCreated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Legalize} returns this
 */
proto.proto.Legalize.prototype.setCreated = function(value) {
  return jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional string updated = 19;
 * @return {string}
 */
proto.proto.Legalize.prototype.getUpdated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Legalize} returns this
 */
proto.proto.Legalize.prototype.setUpdated = function(value) {
  return jspb.Message.setProto3StringField(this, 19, value);
};


/**
 * optional string alumni_name = 20;
 * @return {string}
 */
proto.proto.Legalize.prototype.getAlumniName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Legalize} returns this
 */
proto.proto.Legalize.prototype.setAlumniName = function(value) {
  return jspb.Message.setProto3StringField(this, 20, value);
};


/**
 * optional string alumni_email = 21;
 * @return {string}
 */
proto.proto.Legalize.prototype.getAlumniEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Legalize} returns this
 */
proto.proto.Legalize.prototype.setAlumniEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 21, value);
};


/**
 * optional string no_ijazah = 22;
 * @return {string}
 */
proto.proto.Legalize.prototype.getNoIjazah = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Legalize} returns this
 */
proto.proto.Legalize.prototype.setNoIjazah = function(value) {
  return jspb.Message.setProto3StringField(this, 22, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.LegalizeListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.LegalizeListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.LegalizeListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.LegalizeListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    legalize: (f = msg.getLegalize()) && proto.proto.Legalize.toObject(includeInstance, f),
    listInput: (f = msg.getListInput()) && proto.proto.ListInput.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.LegalizeListResponse}
 */
proto.proto.LegalizeListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.LegalizeListResponse;
  return proto.proto.LegalizeListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.LegalizeListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.LegalizeListResponse}
 */
proto.proto.LegalizeListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Legalize;
      reader.readMessage(value,proto.proto.Legalize.deserializeBinaryFromReader);
      msg.setLegalize(value);
      break;
    case 2:
      var value = new proto.proto.ListInput;
      reader.readMessage(value,proto.proto.ListInput.deserializeBinaryFromReader);
      msg.setListInput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.LegalizeListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.LegalizeListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.LegalizeListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.LegalizeListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLegalize();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.Legalize.serializeBinaryToWriter
    );
  }
  f = message.getListInput();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.ListInput.serializeBinaryToWriter
    );
  }
};


/**
 * optional Legalize Legalize = 1;
 * @return {?proto.proto.Legalize}
 */
proto.proto.LegalizeListResponse.prototype.getLegalize = function() {
  return /** @type{?proto.proto.Legalize} */ (
    jspb.Message.getWrapperField(this, proto.proto.Legalize, 1));
};


/**
 * @param {?proto.proto.Legalize|undefined} value
 * @return {!proto.proto.LegalizeListResponse} returns this
*/
proto.proto.LegalizeListResponse.prototype.setLegalize = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.LegalizeListResponse} returns this
 */
proto.proto.LegalizeListResponse.prototype.clearLegalize = function() {
  return this.setLegalize(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.LegalizeListResponse.prototype.hasLegalize = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ListInput list_input = 2;
 * @return {?proto.proto.ListInput}
 */
proto.proto.LegalizeListResponse.prototype.getListInput = function() {
  return /** @type{?proto.proto.ListInput} */ (
    jspb.Message.getWrapperField(this, proto.proto.ListInput, 2));
};


/**
 * @param {?proto.proto.ListInput|undefined} value
 * @return {!proto.proto.LegalizeListResponse} returns this
*/
proto.proto.LegalizeListResponse.prototype.setListInput = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.LegalizeListResponse} returns this
 */
proto.proto.LegalizeListResponse.prototype.clearListInput = function() {
  return this.setListInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.LegalizeListResponse.prototype.hasListInput = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.Legalizes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Legalizes.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Legalizes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Legalizes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Legalizes.toObject = function(includeInstance, msg) {
  var f, obj = {
    legalizeList: jspb.Message.toObjectList(msg.getLegalizeList(),
    proto.proto.Legalize.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Legalizes}
 */
proto.proto.Legalizes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Legalizes;
  return proto.proto.Legalizes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Legalizes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Legalizes}
 */
proto.proto.Legalizes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Legalize;
      reader.readMessage(value,proto.proto.Legalize.deserializeBinaryFromReader);
      msg.addLegalize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Legalizes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Legalizes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Legalizes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Legalizes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLegalizeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.Legalize.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Legalize legalize = 1;
 * @return {!Array<!proto.proto.Legalize>}
 */
proto.proto.Legalizes.prototype.getLegalizeList = function() {
  return /** @type{!Array<!proto.proto.Legalize>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Legalize, 1));
};


/**
 * @param {!Array<!proto.proto.Legalize>} value
 * @return {!proto.proto.Legalizes} returns this
*/
proto.proto.Legalizes.prototype.setLegalizeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.Legalize=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.Legalize}
 */
proto.proto.Legalizes.prototype.addLegalize = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.Legalize, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.Legalizes} returns this
 */
proto.proto.Legalizes.prototype.clearLegalizeList = function() {
  return this.setLegalizeList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.QuestionGroup.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.QuestionGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.QuestionGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.QuestionGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.QuestionGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    title: jspb.Message.getFieldWithDefault(msg, 2, ""),
    addressedTo: jspb.Message.getFieldWithDefault(msg, 3, 0),
    questionList: jspb.Message.toObjectList(msg.getQuestionList(),
    proto.proto.Question.toObject, includeInstance),
    created: jspb.Message.getFieldWithDefault(msg, 5, ""),
    updated: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.QuestionGroup}
 */
proto.proto.QuestionGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.QuestionGroup;
  return proto.proto.QuestionGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.QuestionGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.QuestionGroup}
 */
proto.proto.QuestionGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAddressedTo(value);
      break;
    case 4:
      var value = new proto.proto.Question;
      reader.readMessage(value,proto.proto.Question.deserializeBinaryFromReader);
      msg.addQuestion(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreated(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.QuestionGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.QuestionGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.QuestionGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.QuestionGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAddressedTo();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getQuestionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.proto.Question.serializeBinaryToWriter
    );
  }
  f = message.getCreated();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getUpdated();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.proto.QuestionGroup.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.QuestionGroup} returns this
 */
proto.proto.QuestionGroup.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.proto.QuestionGroup.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.QuestionGroup} returns this
 */
proto.proto.QuestionGroup.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 addressed_to = 3;
 * @return {number}
 */
proto.proto.QuestionGroup.prototype.getAddressedTo = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.QuestionGroup} returns this
 */
proto.proto.QuestionGroup.prototype.setAddressedTo = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated Question question = 4;
 * @return {!Array<!proto.proto.Question>}
 */
proto.proto.QuestionGroup.prototype.getQuestionList = function() {
  return /** @type{!Array<!proto.proto.Question>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Question, 4));
};


/**
 * @param {!Array<!proto.proto.Question>} value
 * @return {!proto.proto.QuestionGroup} returns this
*/
proto.proto.QuestionGroup.prototype.setQuestionList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.proto.Question=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.Question}
 */
proto.proto.QuestionGroup.prototype.addQuestion = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.proto.Question, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.QuestionGroup} returns this
 */
proto.proto.QuestionGroup.prototype.clearQuestionList = function() {
  return this.setQuestionList([]);
};


/**
 * optional string created = 5;
 * @return {string}
 */
proto.proto.QuestionGroup.prototype.getCreated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.QuestionGroup} returns this
 */
proto.proto.QuestionGroup.prototype.setCreated = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string updated = 6;
 * @return {string}
 */
proto.proto.QuestionGroup.prototype.getUpdated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.QuestionGroup} returns this
 */
proto.proto.QuestionGroup.prototype.setUpdated = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.QuestionGroupList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.QuestionGroupList.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.QuestionGroupList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.QuestionGroupList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.QuestionGroupList.toObject = function(includeInstance, msg) {
  var f, obj = {
    questionGroupList: jspb.Message.toObjectList(msg.getQuestionGroupList(),
    proto.proto.QuestionGroup.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.QuestionGroupList}
 */
proto.proto.QuestionGroupList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.QuestionGroupList;
  return proto.proto.QuestionGroupList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.QuestionGroupList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.QuestionGroupList}
 */
proto.proto.QuestionGroupList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.QuestionGroup;
      reader.readMessage(value,proto.proto.QuestionGroup.deserializeBinaryFromReader);
      msg.addQuestionGroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.QuestionGroupList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.QuestionGroupList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.QuestionGroupList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.QuestionGroupList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuestionGroupList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.QuestionGroup.serializeBinaryToWriter
    );
  }
};


/**
 * repeated QuestionGroup question_group = 1;
 * @return {!Array<!proto.proto.QuestionGroup>}
 */
proto.proto.QuestionGroupList.prototype.getQuestionGroupList = function() {
  return /** @type{!Array<!proto.proto.QuestionGroup>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.QuestionGroup, 1));
};


/**
 * @param {!Array<!proto.proto.QuestionGroup>} value
 * @return {!proto.proto.QuestionGroupList} returns this
*/
proto.proto.QuestionGroupList.prototype.setQuestionGroupList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.QuestionGroup=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.QuestionGroup}
 */
proto.proto.QuestionGroupList.prototype.addQuestionGroup = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.QuestionGroup, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.QuestionGroupList} returns this
 */
proto.proto.QuestionGroupList.prototype.clearQuestionGroupList = function() {
  return this.setQuestionGroupList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.QuestionGroupListInput.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.QuestionGroupListInput.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.QuestionGroupListInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.QuestionGroupListInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.QuestionGroupListInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    questionGroupIdList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.QuestionGroupListInput}
 */
proto.proto.QuestionGroupListInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.QuestionGroupListInput;
  return proto.proto.QuestionGroupListInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.QuestionGroupListInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.QuestionGroupListInput}
 */
proto.proto.QuestionGroupListInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint64());
      msg.setQuestionGroupIdList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.QuestionGroupListInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.QuestionGroupListInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.QuestionGroupListInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.QuestionGroupListInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuestionGroupIdList();
  if (f.length > 0) {
    writer.writePackedUint64(
      1,
      f
    );
  }
};


/**
 * repeated uint64 question_group_id = 1;
 * @return {!Array<number>}
 */
proto.proto.QuestionGroupListInput.prototype.getQuestionGroupIdList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.proto.QuestionGroupListInput} returns this
 */
proto.proto.QuestionGroupListInput.prototype.setQuestionGroupIdList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.proto.QuestionGroupListInput} returns this
 */
proto.proto.QuestionGroupListInput.prototype.addQuestionGroupId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.QuestionGroupListInput} returns this
 */
proto.proto.QuestionGroupListInput.prototype.clearQuestionGroupIdList = function() {
  return this.setQuestionGroupIdList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.Question.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Question.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Question.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Question} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Question.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    questionGroupId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    title: jspb.Message.getFieldWithDefault(msg, 3, ""),
    questionType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    minimumValue: jspb.Message.getFieldWithDefault(msg, 5, ""),
    maximumValue: jspb.Message.getFieldWithDefault(msg, 6, ""),
    isRequired: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    questionOptionList: jspb.Message.toObjectList(msg.getQuestionOptionList(),
    proto.proto.QuestionOption.toObject, includeInstance),
    created: jspb.Message.getFieldWithDefault(msg, 9, ""),
    updated: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Question}
 */
proto.proto.Question.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Question;
  return proto.proto.Question.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Question} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Question}
 */
proto.proto.Question.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setQuestionGroupId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setQuestionType(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMinimumValue(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaximumValue(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsRequired(value);
      break;
    case 8:
      var value = new proto.proto.QuestionOption;
      reader.readMessage(value,proto.proto.QuestionOption.deserializeBinaryFromReader);
      msg.addQuestionOption(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreated(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Question.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Question.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Question} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Question.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getQuestionGroupId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getQuestionType();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getMinimumValue();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getMaximumValue();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getIsRequired();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getQuestionOptionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.proto.QuestionOption.serializeBinaryToWriter
    );
  }
  f = message.getCreated();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getUpdated();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.proto.Question.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Question} returns this
 */
proto.proto.Question.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 question_group_id = 2;
 * @return {number}
 */
proto.proto.Question.prototype.getQuestionGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Question} returns this
 */
proto.proto.Question.prototype.setQuestionGroupId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string title = 3;
 * @return {string}
 */
proto.proto.Question.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Question} returns this
 */
proto.proto.Question.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 question_type = 4;
 * @return {number}
 */
proto.proto.Question.prototype.getQuestionType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Question} returns this
 */
proto.proto.Question.prototype.setQuestionType = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string minimum_value = 5;
 * @return {string}
 */
proto.proto.Question.prototype.getMinimumValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Question} returns this
 */
proto.proto.Question.prototype.setMinimumValue = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string maximum_value = 6;
 * @return {string}
 */
proto.proto.Question.prototype.getMaximumValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Question} returns this
 */
proto.proto.Question.prototype.setMaximumValue = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional bool is_required = 7;
 * @return {boolean}
 */
proto.proto.Question.prototype.getIsRequired = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.Question} returns this
 */
proto.proto.Question.prototype.setIsRequired = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * repeated QuestionOption question_option = 8;
 * @return {!Array<!proto.proto.QuestionOption>}
 */
proto.proto.Question.prototype.getQuestionOptionList = function() {
  return /** @type{!Array<!proto.proto.QuestionOption>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.QuestionOption, 8));
};


/**
 * @param {!Array<!proto.proto.QuestionOption>} value
 * @return {!proto.proto.Question} returns this
*/
proto.proto.Question.prototype.setQuestionOptionList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.proto.QuestionOption=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.QuestionOption}
 */
proto.proto.Question.prototype.addQuestionOption = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.proto.QuestionOption, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.Question} returns this
 */
proto.proto.Question.prototype.clearQuestionOptionList = function() {
  return this.setQuestionOptionList([]);
};


/**
 * optional string created = 9;
 * @return {string}
 */
proto.proto.Question.prototype.getCreated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Question} returns this
 */
proto.proto.Question.prototype.setCreated = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string updated = 10;
 * @return {string}
 */
proto.proto.Question.prototype.getUpdated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Question} returns this
 */
proto.proto.Question.prototype.setUpdated = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.QuestionOption.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.QuestionOption.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.QuestionOption} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.QuestionOption.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    questionId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    title: jspb.Message.getFieldWithDefault(msg, 3, ""),
    isNeedEssay: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    created: jspb.Message.getFieldWithDefault(msg, 5, ""),
    updated: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.QuestionOption}
 */
proto.proto.QuestionOption.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.QuestionOption;
  return proto.proto.QuestionOption.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.QuestionOption} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.QuestionOption}
 */
proto.proto.QuestionOption.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setQuestionId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsNeedEssay(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreated(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.QuestionOption.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.QuestionOption.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.QuestionOption} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.QuestionOption.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getQuestionId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIsNeedEssay();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getCreated();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getUpdated();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.proto.QuestionOption.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.QuestionOption} returns this
 */
proto.proto.QuestionOption.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 question_id = 2;
 * @return {number}
 */
proto.proto.QuestionOption.prototype.getQuestionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.QuestionOption} returns this
 */
proto.proto.QuestionOption.prototype.setQuestionId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string title = 3;
 * @return {string}
 */
proto.proto.QuestionOption.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.QuestionOption} returns this
 */
proto.proto.QuestionOption.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool is_need_essay = 4;
 * @return {boolean}
 */
proto.proto.QuestionOption.prototype.getIsNeedEssay = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.QuestionOption} returns this
 */
proto.proto.QuestionOption.prototype.setIsNeedEssay = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional string created = 5;
 * @return {string}
 */
proto.proto.QuestionOption.prototype.getCreated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.QuestionOption} returns this
 */
proto.proto.QuestionOption.prototype.setCreated = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string updated = 6;
 * @return {string}
 */
proto.proto.QuestionOption.prototype.getUpdated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.QuestionOption} returns this
 */
proto.proto.QuestionOption.prototype.setUpdated = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Tracer.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Tracer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Tracer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Tracer.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    created: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Tracer}
 */
proto.proto.Tracer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Tracer;
  return proto.proto.Tracer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Tracer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Tracer}
 */
proto.proto.Tracer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Tracer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Tracer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Tracer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Tracer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getCreated();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.proto.Tracer.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Tracer} returns this
 */
proto.proto.Tracer.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 user_id = 2;
 * @return {number}
 */
proto.proto.Tracer.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.Tracer} returns this
 */
proto.proto.Tracer.prototype.setUserId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string created = 3;
 * @return {string}
 */
proto.proto.Tracer.prototype.getCreated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Tracer} returns this
 */
proto.proto.Tracer.prototype.setCreated = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.UserAnswer.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.UserAnswer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.UserAnswer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UserAnswer.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tracerId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    questionId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    answer: jspb.Message.getFieldWithDefault(msg, 4, ""),
    created: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.UserAnswer}
 */
proto.proto.UserAnswer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.UserAnswer;
  return proto.proto.UserAnswer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.UserAnswer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.UserAnswer}
 */
proto.proto.UserAnswer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTracerId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setQuestionId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAnswer(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.UserAnswer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.UserAnswer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.UserAnswer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UserAnswer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTracerId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getQuestionId();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getAnswer();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCreated();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.proto.UserAnswer.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.UserAnswer} returns this
 */
proto.proto.UserAnswer.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 tracer_id = 2;
 * @return {number}
 */
proto.proto.UserAnswer.prototype.getTracerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.UserAnswer} returns this
 */
proto.proto.UserAnswer.prototype.setTracerId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 question_id = 3;
 * @return {number}
 */
proto.proto.UserAnswer.prototype.getQuestionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.UserAnswer} returns this
 */
proto.proto.UserAnswer.prototype.setQuestionId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string answer = 4;
 * @return {string}
 */
proto.proto.UserAnswer.prototype.getAnswer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.UserAnswer} returns this
 */
proto.proto.UserAnswer.prototype.setAnswer = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string created = 5;
 * @return {string}
 */
proto.proto.UserAnswer.prototype.getCreated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.UserAnswer} returns this
 */
proto.proto.UserAnswer.prototype.setCreated = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.AlumniKuisioner.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.AlumniKuisioner.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.AlumniKuisioner.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.AlumniKuisioner} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.AlumniKuisioner.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    nik: jspb.Message.getFieldWithDefault(msg, 3, ""),
    answerList: jspb.Message.toObjectList(msg.getAnswerList(),
    proto.proto.Answer.toObject, includeInstance),
    created: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.AlumniKuisioner}
 */
proto.proto.AlumniKuisioner.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.AlumniKuisioner;
  return proto.proto.AlumniKuisioner.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.AlumniKuisioner} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.AlumniKuisioner}
 */
proto.proto.AlumniKuisioner.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNik(value);
      break;
    case 4:
      var value = new proto.proto.Answer;
      reader.readMessage(value,proto.proto.Answer.deserializeBinaryFromReader);
      msg.addAnswer(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.AlumniKuisioner.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.AlumniKuisioner.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.AlumniKuisioner} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.AlumniKuisioner.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNik();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAnswerList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.proto.Answer.serializeBinaryToWriter
    );
  }
  f = message.getCreated();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.proto.AlumniKuisioner.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.AlumniKuisioner} returns this
 */
proto.proto.AlumniKuisioner.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.proto.AlumniKuisioner.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.AlumniKuisioner} returns this
 */
proto.proto.AlumniKuisioner.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string nik = 3;
 * @return {string}
 */
proto.proto.AlumniKuisioner.prototype.getNik = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.AlumniKuisioner} returns this
 */
proto.proto.AlumniKuisioner.prototype.setNik = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated Answer answer = 4;
 * @return {!Array<!proto.proto.Answer>}
 */
proto.proto.AlumniKuisioner.prototype.getAnswerList = function() {
  return /** @type{!Array<!proto.proto.Answer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Answer, 4));
};


/**
 * @param {!Array<!proto.proto.Answer>} value
 * @return {!proto.proto.AlumniKuisioner} returns this
*/
proto.proto.AlumniKuisioner.prototype.setAnswerList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.proto.Answer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.Answer}
 */
proto.proto.AlumniKuisioner.prototype.addAnswer = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.proto.Answer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.AlumniKuisioner} returns this
 */
proto.proto.AlumniKuisioner.prototype.clearAnswerList = function() {
  return this.setAnswerList([]);
};


/**
 * optional string created = 5;
 * @return {string}
 */
proto.proto.AlumniKuisioner.prototype.getCreated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.AlumniKuisioner} returns this
 */
proto.proto.AlumniKuisioner.prototype.setCreated = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Answer.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Answer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Answer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Answer.toObject = function(includeInstance, msg) {
  var f, obj = {
    question: jspb.Message.getFieldWithDefault(msg, 1, ""),
    answer: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Answer}
 */
proto.proto.Answer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Answer;
  return proto.proto.Answer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Answer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Answer}
 */
proto.proto.Answer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuestion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAnswer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Answer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Answer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Answer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Answer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuestion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAnswer();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string question = 1;
 * @return {string}
 */
proto.proto.Answer.prototype.getQuestion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Answer} returns this
 */
proto.proto.Answer.prototype.setQuestion = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string answer = 2;
 * @return {string}
 */
proto.proto.Answer.prototype.getAnswer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Answer} returns this
 */
proto.proto.Answer.prototype.setAnswer = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.TracerList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.TracerList.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.TracerList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.TracerList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TracerList.toObject = function(includeInstance, msg) {
  var f, obj = {
    answerList: jspb.Message.toObjectList(msg.getAnswerList(),
    proto.proto.AlumniKuisioner.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.TracerList}
 */
proto.proto.TracerList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.TracerList;
  return proto.proto.TracerList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.TracerList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.TracerList}
 */
proto.proto.TracerList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.AlumniKuisioner;
      reader.readMessage(value,proto.proto.AlumniKuisioner.deserializeBinaryFromReader);
      msg.addAnswer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.TracerList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.TracerList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.TracerList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TracerList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnswerList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.AlumniKuisioner.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AlumniKuisioner answer = 1;
 * @return {!Array<!proto.proto.AlumniKuisioner>}
 */
proto.proto.TracerList.prototype.getAnswerList = function() {
  return /** @type{!Array<!proto.proto.AlumniKuisioner>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.AlumniKuisioner, 1));
};


/**
 * @param {!Array<!proto.proto.AlumniKuisioner>} value
 * @return {!proto.proto.TracerList} returns this
*/
proto.proto.TracerList.prototype.setAnswerList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.AlumniKuisioner=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.AlumniKuisioner}
 */
proto.proto.TracerList.prototype.addAnswer = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.AlumniKuisioner, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.TracerList} returns this
 */
proto.proto.TracerList.prototype.clearAnswerList = function() {
  return this.setAnswerList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.User.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.User.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    email: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    isActived: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    userType: jspb.Message.getFieldWithDefault(msg, 5, 0),
    alumni: (f = msg.getAlumni()) && proto.proto.Alumni.toObject(includeInstance, f),
    alumniAppraiser: (f = msg.getAlumniAppraiser()) && proto.proto.AlumniAppraiser.toObject(includeInstance, f),
    userAnswerList: jspb.Message.toObjectList(msg.getUserAnswerList(),
    proto.proto.UserAnswer.toObject, includeInstance),
    created: jspb.Message.getFieldWithDefault(msg, 9, ""),
    updated: jspb.Message.getFieldWithDefault(msg, 10, ""),
    token: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.User}
 */
proto.proto.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.User;
  return proto.proto.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.User}
 */
proto.proto.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsActived(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserType(value);
      break;
    case 6:
      var value = new proto.proto.Alumni;
      reader.readMessage(value,proto.proto.Alumni.deserializeBinaryFromReader);
      msg.setAlumni(value);
      break;
    case 7:
      var value = new proto.proto.AlumniAppraiser;
      reader.readMessage(value,proto.proto.AlumniAppraiser.deserializeBinaryFromReader);
      msg.setAlumniAppraiser(value);
      break;
    case 8:
      var value = new proto.proto.UserAnswer;
      reader.readMessage(value,proto.proto.UserAnswer.deserializeBinaryFromReader);
      msg.addUserAnswer(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreated(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setUpdated(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIsActived();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getUserType();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getAlumni();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.proto.Alumni.serializeBinaryToWriter
    );
  }
  f = message.getAlumniAppraiser();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.proto.AlumniAppraiser.serializeBinaryToWriter
    );
  }
  f = message.getUserAnswerList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.proto.UserAnswer.serializeBinaryToWriter
    );
  }
  f = message.getCreated();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getUpdated();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.proto.User.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.User} returns this
 */
proto.proto.User.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string email = 2;
 * @return {string}
 */
proto.proto.User.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.User} returns this
 */
proto.proto.User.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.proto.User.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.User} returns this
 */
proto.proto.User.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool is_actived = 4;
 * @return {boolean}
 */
proto.proto.User.prototype.getIsActived = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.User} returns this
 */
proto.proto.User.prototype.setIsActived = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional uint32 user_type = 5;
 * @return {number}
 */
proto.proto.User.prototype.getUserType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.User} returns this
 */
proto.proto.User.prototype.setUserType = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional Alumni alumni = 6;
 * @return {?proto.proto.Alumni}
 */
proto.proto.User.prototype.getAlumni = function() {
  return /** @type{?proto.proto.Alumni} */ (
    jspb.Message.getWrapperField(this, proto.proto.Alumni, 6));
};


/**
 * @param {?proto.proto.Alumni|undefined} value
 * @return {!proto.proto.User} returns this
*/
proto.proto.User.prototype.setAlumni = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.User} returns this
 */
proto.proto.User.prototype.clearAlumni = function() {
  return this.setAlumni(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.User.prototype.hasAlumni = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional AlumniAppraiser alumni_appraiser = 7;
 * @return {?proto.proto.AlumniAppraiser}
 */
proto.proto.User.prototype.getAlumniAppraiser = function() {
  return /** @type{?proto.proto.AlumniAppraiser} */ (
    jspb.Message.getWrapperField(this, proto.proto.AlumniAppraiser, 7));
};


/**
 * @param {?proto.proto.AlumniAppraiser|undefined} value
 * @return {!proto.proto.User} returns this
*/
proto.proto.User.prototype.setAlumniAppraiser = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.User} returns this
 */
proto.proto.User.prototype.clearAlumniAppraiser = function() {
  return this.setAlumniAppraiser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.User.prototype.hasAlumniAppraiser = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated UserAnswer user_answer = 8;
 * @return {!Array<!proto.proto.UserAnswer>}
 */
proto.proto.User.prototype.getUserAnswerList = function() {
  return /** @type{!Array<!proto.proto.UserAnswer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.UserAnswer, 8));
};


/**
 * @param {!Array<!proto.proto.UserAnswer>} value
 * @return {!proto.proto.User} returns this
*/
proto.proto.User.prototype.setUserAnswerList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.proto.UserAnswer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.UserAnswer}
 */
proto.proto.User.prototype.addUserAnswer = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.proto.UserAnswer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.User} returns this
 */
proto.proto.User.prototype.clearUserAnswerList = function() {
  return this.setUserAnswerList([]);
};


/**
 * optional string created = 9;
 * @return {string}
 */
proto.proto.User.prototype.getCreated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.User} returns this
 */
proto.proto.User.prototype.setCreated = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string updated = 10;
 * @return {string}
 */
proto.proto.User.prototype.getUpdated = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.User} returns this
 */
proto.proto.User.prototype.setUpdated = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string token = 11;
 * @return {string}
 */
proto.proto.User.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.User} returns this
 */
proto.proto.User.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.UserListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.UserListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.UserListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UserListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.proto.User.toObject(includeInstance, f),
    listInput: (f = msg.getListInput()) && proto.proto.ListInput.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.UserListResponse}
 */
proto.proto.UserListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.UserListResponse;
  return proto.proto.UserListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.UserListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.UserListResponse}
 */
proto.proto.UserListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.User;
      reader.readMessage(value,proto.proto.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 2:
      var value = new proto.proto.ListInput;
      reader.readMessage(value,proto.proto.ListInput.deserializeBinaryFromReader);
      msg.setListInput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.UserListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.UserListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.UserListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UserListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.User.serializeBinaryToWriter
    );
  }
  f = message.getListInput();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.ListInput.serializeBinaryToWriter
    );
  }
};


/**
 * optional User user = 1;
 * @return {?proto.proto.User}
 */
proto.proto.UserListResponse.prototype.getUser = function() {
  return /** @type{?proto.proto.User} */ (
    jspb.Message.getWrapperField(this, proto.proto.User, 1));
};


/**
 * @param {?proto.proto.User|undefined} value
 * @return {!proto.proto.UserListResponse} returns this
*/
proto.proto.UserListResponse.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.UserListResponse} returns this
 */
proto.proto.UserListResponse.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.UserListResponse.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ListInput list_input = 2;
 * @return {?proto.proto.ListInput}
 */
proto.proto.UserListResponse.prototype.getListInput = function() {
  return /** @type{?proto.proto.ListInput} */ (
    jspb.Message.getWrapperField(this, proto.proto.ListInput, 2));
};


/**
 * @param {?proto.proto.ListInput|undefined} value
 * @return {!proto.proto.UserListResponse} returns this
*/
proto.proto.UserListResponse.prototype.setListInput = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.UserListResponse} returns this
 */
proto.proto.UserListResponse.prototype.clearListInput = function() {
  return this.setListInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.UserListResponse.prototype.hasListInput = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ChangePassword.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ChangePassword.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ChangePassword} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ChangePassword.toObject = function(includeInstance, msg) {
  var f, obj = {
    newPassword: jspb.Message.getFieldWithDefault(msg, 1, ""),
    reNewPassword: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ChangePassword}
 */
proto.proto.ChangePassword.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ChangePassword;
  return proto.proto.ChangePassword.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ChangePassword} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ChangePassword}
 */
proto.proto.ChangePassword.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewPassword(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReNewPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ChangePassword.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ChangePassword.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ChangePassword} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ChangePassword.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNewPassword();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getReNewPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string new_password = 1;
 * @return {string}
 */
proto.proto.ChangePassword.prototype.getNewPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.ChangePassword} returns this
 */
proto.proto.ChangePassword.prototype.setNewPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string re_new_password = 2;
 * @return {string}
 */
proto.proto.ChangePassword.prototype.getReNewPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.ChangePassword} returns this
 */
proto.proto.ChangePassword.prototype.setReNewPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.LoginInput.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.LoginInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.LoginInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.LoginInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    email: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.LoginInput}
 */
proto.proto.LoginInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.LoginInput;
  return proto.proto.LoginInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.LoginInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.LoginInput}
 */
proto.proto.LoginInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.LoginInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.LoginInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.LoginInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.LoginInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string email = 1;
 * @return {string}
 */
proto.proto.LoginInput.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.LoginInput} returns this
 */
proto.proto.LoginInput.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.proto.LoginInput.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.LoginInput} returns this
 */
proto.proto.LoginInput.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.AlumniRegistrationInput.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.AlumniRegistrationInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.AlumniRegistrationInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.AlumniRegistrationInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    alumni: (f = msg.getAlumni()) && proto.proto.Alumni.toObject(includeInstance, f),
    user: (f = msg.getUser()) && proto.proto.User.toObject(includeInstance, f),
    certificate: (f = msg.getCertificate()) && proto.proto.Certificate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.AlumniRegistrationInput}
 */
proto.proto.AlumniRegistrationInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.AlumniRegistrationInput;
  return proto.proto.AlumniRegistrationInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.AlumniRegistrationInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.AlumniRegistrationInput}
 */
proto.proto.AlumniRegistrationInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Alumni;
      reader.readMessage(value,proto.proto.Alumni.deserializeBinaryFromReader);
      msg.setAlumni(value);
      break;
    case 2:
      var value = new proto.proto.User;
      reader.readMessage(value,proto.proto.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 3:
      var value = new proto.proto.Certificate;
      reader.readMessage(value,proto.proto.Certificate.deserializeBinaryFromReader);
      msg.setCertificate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.AlumniRegistrationInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.AlumniRegistrationInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.AlumniRegistrationInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.AlumniRegistrationInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAlumni();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.Alumni.serializeBinaryToWriter
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.User.serializeBinaryToWriter
    );
  }
  f = message.getCertificate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.proto.Certificate.serializeBinaryToWriter
    );
  }
};


/**
 * optional Alumni alumni = 1;
 * @return {?proto.proto.Alumni}
 */
proto.proto.AlumniRegistrationInput.prototype.getAlumni = function() {
  return /** @type{?proto.proto.Alumni} */ (
    jspb.Message.getWrapperField(this, proto.proto.Alumni, 1));
};


/**
 * @param {?proto.proto.Alumni|undefined} value
 * @return {!proto.proto.AlumniRegistrationInput} returns this
*/
proto.proto.AlumniRegistrationInput.prototype.setAlumni = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.AlumniRegistrationInput} returns this
 */
proto.proto.AlumniRegistrationInput.prototype.clearAlumni = function() {
  return this.setAlumni(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.AlumniRegistrationInput.prototype.hasAlumni = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional User user = 2;
 * @return {?proto.proto.User}
 */
proto.proto.AlumniRegistrationInput.prototype.getUser = function() {
  return /** @type{?proto.proto.User} */ (
    jspb.Message.getWrapperField(this, proto.proto.User, 2));
};


/**
 * @param {?proto.proto.User|undefined} value
 * @return {!proto.proto.AlumniRegistrationInput} returns this
*/
proto.proto.AlumniRegistrationInput.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.AlumniRegistrationInput} returns this
 */
proto.proto.AlumniRegistrationInput.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.AlumniRegistrationInput.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Certificate certificate = 3;
 * @return {?proto.proto.Certificate}
 */
proto.proto.AlumniRegistrationInput.prototype.getCertificate = function() {
  return /** @type{?proto.proto.Certificate} */ (
    jspb.Message.getWrapperField(this, proto.proto.Certificate, 3));
};


/**
 * @param {?proto.proto.Certificate|undefined} value
 * @return {!proto.proto.AlumniRegistrationInput} returns this
*/
proto.proto.AlumniRegistrationInput.prototype.setCertificate = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.AlumniRegistrationInput} returns this
 */
proto.proto.AlumniRegistrationInput.prototype.clearCertificate = function() {
  return this.setCertificate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.AlumniRegistrationInput.prototype.hasCertificate = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.proto);
