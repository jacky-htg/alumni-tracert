syntax = "proto3";

package proto;
option go_package = ".;proto";

import "alumni_appraiser_message.proto";
import "alumni_message.proto";
import "generic_message.proto";
import "legalize_message.proto";
import "question_group_message.proto";
import "user_answer_message.proto";
import "user_message.proto";
import "certificate_message.proto";

service TracertService {
  rpc Login(LoginInput) returns (User) {}
  /* rpc ForgotPassword(StringMessage) return (StringMessage) {}
  rpc ChangePassword(ChangePassword) return (StringMessage) {} */
 
  rpc QuestionList(QuestionGroupListInput) returns (QuestionGroupList) {}

  rpc AlumniRegistration(AlumniRegistrationInput) returns (AlumniRegistrationInput) {}
  rpc CertificateCreate(Certificate) returns (Certificate) {}
  rpc AlumniCreate(Alumni) returns (Alumni) {}
  rpc AlumniList(ListInput) returns (stream AlumniListResponse) {} 
  rpc AlumniGet(Alumni) returns (Alumni) {}
  /* rpc AlumniUpdate(Alumni) returns (Alumni) {} */

  rpc AlumniAppraiserCreate(AlumniAppraiser) returns (AlumniAppraiser) {}
  rpc AlumniAppraiserList(ListInput) returns (stream AlumniAppraiserListResponse) {}
  rpc AlumniAppraiserGet(AlumniAppraiser) returns (AlumniAppraiser) {}
  /* rpc AlumniAppraiserUpdate(AlumniAppraiser) returns (AlumniAppraiser) {}

  */
  rpc UserCreate(User) returns (User) {}
  rpc UserList(ListInput) returns (stream UserListResponse) {}
  rpc UserGet(User) returns (User) {}
  /* rpc UserUpdate(User) returns (User) {} */

  rpc LegalizeUpload(Legalize) returns (Legalize) {}
  rpc LegalizeList(ListInput) returns (stream LegalizeListResponse) {}
  rpc LegalizeGet(Legalize) returns (Legalize) {}
  rpc LegalizeGetOwn(EmptyMessage) returns (Certificates) {}
  rpc LegalizeDone(Legalize) returns (Legalize) {}
  rpc LegalizeVerified(UintMessage) returns (Legalize) {}
  rpc LegalizeRejected(UintMessage) returns (Legalize) {} 
  rpc LegalizeApproved(UintMessage) returns (Legalize) {}
  rpc LegalizeRating(Legalize) returns (StringMessage) {}

  rpc UserAnswerCreate(UserAnswer) returns (UserAnswer) {}
  rpc TracerCreate(Tracer) returns (Tracer) {}
  rpc GetTrace(EmptyMessage) returns (TracerList){}
}