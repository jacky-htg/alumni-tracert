// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: tracert_service.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_tracert_service_proto protoreflect.FileDescriptor

var file_tracert_service_proto_rawDesc = []byte{
	0x0a, 0x15, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x61, 0x6c, 0x75, 0x6d, 0x6e, 0x69, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14,
	0x61, 0x6c, 0x75, 0x6d, 0x6e, 0x69, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6c, 0x65, 0x67,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x19, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x19, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xd5, 0x0b, 0x0a, 0x0e,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x29,
	0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x0b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0c, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x12, 0x41, 0x6c, 0x75, 0x6d, 0x6e, 0x69, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x75, 0x6d, 0x6e, 0x69, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x75, 0x6d, 0x6e, 0x69, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x11,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x0c, 0x41,
	0x6c, 0x75, 0x6d, 0x6e, 0x69, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x0d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x75, 0x6d, 0x6e, 0x69, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x75, 0x6d, 0x6e, 0x69, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0a, 0x41,
	0x6c, 0x75, 0x6d, 0x6e, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x75, 0x6d, 0x6e, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x2b, 0x0a, 0x09, 0x41, 0x6c,
	0x75, 0x6d, 0x6e, 0x69, 0x47, 0x65, 0x74, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x41, 0x6c, 0x75, 0x6d, 0x6e, 0x69, 0x1a, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x6c, 0x75, 0x6d, 0x6e, 0x69, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x15, 0x41, 0x6c, 0x75, 0x6d, 0x6e,
	0x69, 0x41, 0x70, 0x70, 0x72, 0x61, 0x69, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x75, 0x6d, 0x6e, 0x69, 0x41,
	0x70, 0x70, 0x72, 0x61, 0x69, 0x73, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x6c, 0x75, 0x6d, 0x6e, 0x69, 0x41, 0x70, 0x70, 0x72, 0x61, 0x69, 0x73, 0x65, 0x72,
	0x22, 0x00, 0x12, 0x4f, 0x0a, 0x13, 0x41, 0x6c, 0x75, 0x6d, 0x6e, 0x69, 0x41, 0x70, 0x70, 0x72,
	0x61, 0x69, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x75, 0x6d, 0x6e, 0x69, 0x41, 0x70, 0x70, 0x72, 0x61, 0x69,
	0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x46, 0x0a, 0x12, 0x41, 0x6c, 0x75, 0x6d, 0x6e, 0x69, 0x41, 0x70, 0x70,
	0x72, 0x61, 0x69, 0x73, 0x65, 0x72, 0x47, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x6c, 0x75, 0x6d, 0x6e, 0x69, 0x41, 0x70, 0x70, 0x72, 0x61, 0x69, 0x73, 0x65,
	0x72, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6c, 0x75, 0x6d, 0x6e, 0x69,
	0x41, 0x70, 0x70, 0x72, 0x61, 0x69, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x0a, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x25, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x47, 0x65, 0x74, 0x12, 0x0b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x0b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x0e, 0x4c, 0x65, 0x67, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a,
	0x0c, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a,
	0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x31, 0x0a, 0x0b, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x47, 0x65, 0x74, 0x12,
	0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x47,
	0x65, 0x74, 0x4f, 0x77, 0x6e, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x32, 0x0a, 0x0c, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x44, 0x6f, 0x6e,
	0x65, 0x12, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x10, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x22, 0x00,
	0x12, 0x39, 0x0a, 0x10, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x10, 0x4c,
	0x65, 0x67, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x12,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x65, 0x67, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x00, 0x12, 0x3a, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0x00, 0x12, 0x2e, 0x0a,
	0x0c, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x1a, 0x0d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x22, 0x00, 0x12, 0x34, 0x0a,
	0x08, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x00, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_tracert_service_proto_goTypes = []interface{}{
	(*LoginInput)(nil),                  // 0: proto.LoginInput
	(*QuestionGroupListInput)(nil),      // 1: proto.QuestionGroupListInput
	(*AlumniRegistrationInput)(nil),     // 2: proto.AlumniRegistrationInput
	(*Certificate)(nil),                 // 3: proto.Certificate
	(*Alumni)(nil),                      // 4: proto.Alumni
	(*ListInput)(nil),                   // 5: proto.ListInput
	(*AlumniAppraiser)(nil),             // 6: proto.AlumniAppraiser
	(*User)(nil),                        // 7: proto.User
	(*Legalize)(nil),                    // 8: proto.Legalize
	(*EmptyMessage)(nil),                // 9: proto.EmptyMessage
	(*UintMessage)(nil),                 // 10: proto.UintMessage
	(*UserAnswer)(nil),                  // 11: proto.UserAnswer
	(*Tracer)(nil),                      // 12: proto.Tracer
	(*QuestionGroupList)(nil),           // 13: proto.QuestionGroupList
	(*AlumniListResponse)(nil),          // 14: proto.AlumniListResponse
	(*AlumniAppraiserListResponse)(nil), // 15: proto.AlumniAppraiserListResponse
	(*UserListResponse)(nil),            // 16: proto.UserListResponse
	(*LegalizeListResponse)(nil),        // 17: proto.LegalizeListResponse
	(*Certificates)(nil),                // 18: proto.Certificates
	(*StringMessage)(nil),               // 19: proto.StringMessage
	(*TracerList)(nil),                  // 20: proto.TracerList
}
var file_tracert_service_proto_depIdxs = []int32{
	0,  // 0: proto.TracertService.Login:input_type -> proto.LoginInput
	1,  // 1: proto.TracertService.QuestionList:input_type -> proto.QuestionGroupListInput
	2,  // 2: proto.TracertService.AlumniRegistration:input_type -> proto.AlumniRegistrationInput
	3,  // 3: proto.TracertService.CertificateCreate:input_type -> proto.Certificate
	4,  // 4: proto.TracertService.AlumniCreate:input_type -> proto.Alumni
	5,  // 5: proto.TracertService.AlumniList:input_type -> proto.ListInput
	4,  // 6: proto.TracertService.AlumniGet:input_type -> proto.Alumni
	6,  // 7: proto.TracertService.AlumniAppraiserCreate:input_type -> proto.AlumniAppraiser
	5,  // 8: proto.TracertService.AlumniAppraiserList:input_type -> proto.ListInput
	6,  // 9: proto.TracertService.AlumniAppraiserGet:input_type -> proto.AlumniAppraiser
	7,  // 10: proto.TracertService.UserCreate:input_type -> proto.User
	5,  // 11: proto.TracertService.UserList:input_type -> proto.ListInput
	7,  // 12: proto.TracertService.UserGet:input_type -> proto.User
	8,  // 13: proto.TracertService.LegalizeUpload:input_type -> proto.Legalize
	5,  // 14: proto.TracertService.LegalizeList:input_type -> proto.ListInput
	8,  // 15: proto.TracertService.LegalizeGet:input_type -> proto.Legalize
	9,  // 16: proto.TracertService.LegalizeGetOwn:input_type -> proto.EmptyMessage
	8,  // 17: proto.TracertService.LegalizeDone:input_type -> proto.Legalize
	10, // 18: proto.TracertService.LegalizeVerified:input_type -> proto.UintMessage
	10, // 19: proto.TracertService.LegalizeRejected:input_type -> proto.UintMessage
	10, // 20: proto.TracertService.LegalizeApproved:input_type -> proto.UintMessage
	8,  // 21: proto.TracertService.LegalizeRating:input_type -> proto.Legalize
	11, // 22: proto.TracertService.UserAnswerCreate:input_type -> proto.UserAnswer
	12, // 23: proto.TracertService.TracerCreate:input_type -> proto.Tracer
	9,  // 24: proto.TracertService.GetTrace:input_type -> proto.EmptyMessage
	7,  // 25: proto.TracertService.Login:output_type -> proto.User
	13, // 26: proto.TracertService.QuestionList:output_type -> proto.QuestionGroupList
	2,  // 27: proto.TracertService.AlumniRegistration:output_type -> proto.AlumniRegistrationInput
	3,  // 28: proto.TracertService.CertificateCreate:output_type -> proto.Certificate
	4,  // 29: proto.TracertService.AlumniCreate:output_type -> proto.Alumni
	14, // 30: proto.TracertService.AlumniList:output_type -> proto.AlumniListResponse
	4,  // 31: proto.TracertService.AlumniGet:output_type -> proto.Alumni
	6,  // 32: proto.TracertService.AlumniAppraiserCreate:output_type -> proto.AlumniAppraiser
	15, // 33: proto.TracertService.AlumniAppraiserList:output_type -> proto.AlumniAppraiserListResponse
	6,  // 34: proto.TracertService.AlumniAppraiserGet:output_type -> proto.AlumniAppraiser
	7,  // 35: proto.TracertService.UserCreate:output_type -> proto.User
	16, // 36: proto.TracertService.UserList:output_type -> proto.UserListResponse
	7,  // 37: proto.TracertService.UserGet:output_type -> proto.User
	8,  // 38: proto.TracertService.LegalizeUpload:output_type -> proto.Legalize
	17, // 39: proto.TracertService.LegalizeList:output_type -> proto.LegalizeListResponse
	8,  // 40: proto.TracertService.LegalizeGet:output_type -> proto.Legalize
	18, // 41: proto.TracertService.LegalizeGetOwn:output_type -> proto.Certificates
	8,  // 42: proto.TracertService.LegalizeDone:output_type -> proto.Legalize
	8,  // 43: proto.TracertService.LegalizeVerified:output_type -> proto.Legalize
	8,  // 44: proto.TracertService.LegalizeRejected:output_type -> proto.Legalize
	8,  // 45: proto.TracertService.LegalizeApproved:output_type -> proto.Legalize
	19, // 46: proto.TracertService.LegalizeRating:output_type -> proto.StringMessage
	11, // 47: proto.TracertService.UserAnswerCreate:output_type -> proto.UserAnswer
	12, // 48: proto.TracertService.TracerCreate:output_type -> proto.Tracer
	20, // 49: proto.TracertService.GetTrace:output_type -> proto.TracerList
	25, // [25:50] is the sub-list for method output_type
	0,  // [0:25] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_tracert_service_proto_init() }
func file_tracert_service_proto_init() {
	if File_tracert_service_proto != nil {
		return
	}
	file_alumni_appraiser_message_proto_init()
	file_alumni_message_proto_init()
	file_generic_message_proto_init()
	file_legalize_message_proto_init()
	file_question_group_message_proto_init()
	file_user_answer_message_proto_init()
	file_user_message_proto_init()
	file_certificate_message_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tracert_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tracert_service_proto_goTypes,
		DependencyIndexes: file_tracert_service_proto_depIdxs,
	}.Build()
	File_tracert_service_proto = out.File
	file_tracert_service_proto_rawDesc = nil
	file_tracert_service_proto_goTypes = nil
	file_tracert_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TracertServiceClient is the client API for TracertService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TracertServiceClient interface {
	Login(ctx context.Context, in *LoginInput, opts ...grpc.CallOption) (*User, error)
	QuestionList(ctx context.Context, in *QuestionGroupListInput, opts ...grpc.CallOption) (*QuestionGroupList, error)
	AlumniRegistration(ctx context.Context, in *AlumniRegistrationInput, opts ...grpc.CallOption) (*AlumniRegistrationInput, error)
	CertificateCreate(ctx context.Context, in *Certificate, opts ...grpc.CallOption) (*Certificate, error)
	AlumniCreate(ctx context.Context, in *Alumni, opts ...grpc.CallOption) (*Alumni, error)
	AlumniList(ctx context.Context, in *ListInput, opts ...grpc.CallOption) (TracertService_AlumniListClient, error)
	AlumniGet(ctx context.Context, in *Alumni, opts ...grpc.CallOption) (*Alumni, error)
	AlumniAppraiserCreate(ctx context.Context, in *AlumniAppraiser, opts ...grpc.CallOption) (*AlumniAppraiser, error)
	AlumniAppraiserList(ctx context.Context, in *ListInput, opts ...grpc.CallOption) (TracertService_AlumniAppraiserListClient, error)
	AlumniAppraiserGet(ctx context.Context, in *AlumniAppraiser, opts ...grpc.CallOption) (*AlumniAppraiser, error)
	// rpc AlumniAppraiserUpdate(AlumniAppraiser) returns (AlumniAppraiser) {}
	//
	UserCreate(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	UserList(ctx context.Context, in *ListInput, opts ...grpc.CallOption) (TracertService_UserListClient, error)
	UserGet(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	LegalizeUpload(ctx context.Context, in *Legalize, opts ...grpc.CallOption) (*Legalize, error)
	LegalizeList(ctx context.Context, in *ListInput, opts ...grpc.CallOption) (TracertService_LegalizeListClient, error)
	LegalizeGet(ctx context.Context, in *Legalize, opts ...grpc.CallOption) (*Legalize, error)
	LegalizeGetOwn(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*Certificates, error)
	LegalizeDone(ctx context.Context, in *Legalize, opts ...grpc.CallOption) (*Legalize, error)
	LegalizeVerified(ctx context.Context, in *UintMessage, opts ...grpc.CallOption) (*Legalize, error)
	LegalizeRejected(ctx context.Context, in *UintMessage, opts ...grpc.CallOption) (*Legalize, error)
	LegalizeApproved(ctx context.Context, in *UintMessage, opts ...grpc.CallOption) (*Legalize, error)
	LegalizeRating(ctx context.Context, in *Legalize, opts ...grpc.CallOption) (*StringMessage, error)
	UserAnswerCreate(ctx context.Context, in *UserAnswer, opts ...grpc.CallOption) (*UserAnswer, error)
	TracerCreate(ctx context.Context, in *Tracer, opts ...grpc.CallOption) (*Tracer, error)
	GetTrace(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*TracerList, error)
}

type tracertServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTracertServiceClient(cc grpc.ClientConnInterface) TracertServiceClient {
	return &tracertServiceClient{cc}
}

func (c *tracertServiceClient) Login(ctx context.Context, in *LoginInput, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/proto.TracertService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tracertServiceClient) QuestionList(ctx context.Context, in *QuestionGroupListInput, opts ...grpc.CallOption) (*QuestionGroupList, error) {
	out := new(QuestionGroupList)
	err := c.cc.Invoke(ctx, "/proto.TracertService/QuestionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tracertServiceClient) AlumniRegistration(ctx context.Context, in *AlumniRegistrationInput, opts ...grpc.CallOption) (*AlumniRegistrationInput, error) {
	out := new(AlumniRegistrationInput)
	err := c.cc.Invoke(ctx, "/proto.TracertService/AlumniRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tracertServiceClient) CertificateCreate(ctx context.Context, in *Certificate, opts ...grpc.CallOption) (*Certificate, error) {
	out := new(Certificate)
	err := c.cc.Invoke(ctx, "/proto.TracertService/CertificateCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tracertServiceClient) AlumniCreate(ctx context.Context, in *Alumni, opts ...grpc.CallOption) (*Alumni, error) {
	out := new(Alumni)
	err := c.cc.Invoke(ctx, "/proto.TracertService/AlumniCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tracertServiceClient) AlumniList(ctx context.Context, in *ListInput, opts ...grpc.CallOption) (TracertService_AlumniListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TracertService_serviceDesc.Streams[0], "/proto.TracertService/AlumniList", opts...)
	if err != nil {
		return nil, err
	}
	x := &tracertServiceAlumniListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TracertService_AlumniListClient interface {
	Recv() (*AlumniListResponse, error)
	grpc.ClientStream
}

type tracertServiceAlumniListClient struct {
	grpc.ClientStream
}

func (x *tracertServiceAlumniListClient) Recv() (*AlumniListResponse, error) {
	m := new(AlumniListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tracertServiceClient) AlumniGet(ctx context.Context, in *Alumni, opts ...grpc.CallOption) (*Alumni, error) {
	out := new(Alumni)
	err := c.cc.Invoke(ctx, "/proto.TracertService/AlumniGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tracertServiceClient) AlumniAppraiserCreate(ctx context.Context, in *AlumniAppraiser, opts ...grpc.CallOption) (*AlumniAppraiser, error) {
	out := new(AlumniAppraiser)
	err := c.cc.Invoke(ctx, "/proto.TracertService/AlumniAppraiserCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tracertServiceClient) AlumniAppraiserList(ctx context.Context, in *ListInput, opts ...grpc.CallOption) (TracertService_AlumniAppraiserListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TracertService_serviceDesc.Streams[1], "/proto.TracertService/AlumniAppraiserList", opts...)
	if err != nil {
		return nil, err
	}
	x := &tracertServiceAlumniAppraiserListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TracertService_AlumniAppraiserListClient interface {
	Recv() (*AlumniAppraiserListResponse, error)
	grpc.ClientStream
}

type tracertServiceAlumniAppraiserListClient struct {
	grpc.ClientStream
}

func (x *tracertServiceAlumniAppraiserListClient) Recv() (*AlumniAppraiserListResponse, error) {
	m := new(AlumniAppraiserListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tracertServiceClient) AlumniAppraiserGet(ctx context.Context, in *AlumniAppraiser, opts ...grpc.CallOption) (*AlumniAppraiser, error) {
	out := new(AlumniAppraiser)
	err := c.cc.Invoke(ctx, "/proto.TracertService/AlumniAppraiserGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tracertServiceClient) UserCreate(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/proto.TracertService/UserCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tracertServiceClient) UserList(ctx context.Context, in *ListInput, opts ...grpc.CallOption) (TracertService_UserListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TracertService_serviceDesc.Streams[2], "/proto.TracertService/UserList", opts...)
	if err != nil {
		return nil, err
	}
	x := &tracertServiceUserListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TracertService_UserListClient interface {
	Recv() (*UserListResponse, error)
	grpc.ClientStream
}

type tracertServiceUserListClient struct {
	grpc.ClientStream
}

func (x *tracertServiceUserListClient) Recv() (*UserListResponse, error) {
	m := new(UserListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tracertServiceClient) UserGet(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/proto.TracertService/UserGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tracertServiceClient) LegalizeUpload(ctx context.Context, in *Legalize, opts ...grpc.CallOption) (*Legalize, error) {
	out := new(Legalize)
	err := c.cc.Invoke(ctx, "/proto.TracertService/LegalizeUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tracertServiceClient) LegalizeList(ctx context.Context, in *ListInput, opts ...grpc.CallOption) (TracertService_LegalizeListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TracertService_serviceDesc.Streams[3], "/proto.TracertService/LegalizeList", opts...)
	if err != nil {
		return nil, err
	}
	x := &tracertServiceLegalizeListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TracertService_LegalizeListClient interface {
	Recv() (*LegalizeListResponse, error)
	grpc.ClientStream
}

type tracertServiceLegalizeListClient struct {
	grpc.ClientStream
}

func (x *tracertServiceLegalizeListClient) Recv() (*LegalizeListResponse, error) {
	m := new(LegalizeListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tracertServiceClient) LegalizeGet(ctx context.Context, in *Legalize, opts ...grpc.CallOption) (*Legalize, error) {
	out := new(Legalize)
	err := c.cc.Invoke(ctx, "/proto.TracertService/LegalizeGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tracertServiceClient) LegalizeGetOwn(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*Certificates, error) {
	out := new(Certificates)
	err := c.cc.Invoke(ctx, "/proto.TracertService/LegalizeGetOwn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tracertServiceClient) LegalizeDone(ctx context.Context, in *Legalize, opts ...grpc.CallOption) (*Legalize, error) {
	out := new(Legalize)
	err := c.cc.Invoke(ctx, "/proto.TracertService/LegalizeDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tracertServiceClient) LegalizeVerified(ctx context.Context, in *UintMessage, opts ...grpc.CallOption) (*Legalize, error) {
	out := new(Legalize)
	err := c.cc.Invoke(ctx, "/proto.TracertService/LegalizeVerified", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tracertServiceClient) LegalizeRejected(ctx context.Context, in *UintMessage, opts ...grpc.CallOption) (*Legalize, error) {
	out := new(Legalize)
	err := c.cc.Invoke(ctx, "/proto.TracertService/LegalizeRejected", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tracertServiceClient) LegalizeApproved(ctx context.Context, in *UintMessage, opts ...grpc.CallOption) (*Legalize, error) {
	out := new(Legalize)
	err := c.cc.Invoke(ctx, "/proto.TracertService/LegalizeApproved", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tracertServiceClient) LegalizeRating(ctx context.Context, in *Legalize, opts ...grpc.CallOption) (*StringMessage, error) {
	out := new(StringMessage)
	err := c.cc.Invoke(ctx, "/proto.TracertService/LegalizeRating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tracertServiceClient) UserAnswerCreate(ctx context.Context, in *UserAnswer, opts ...grpc.CallOption) (*UserAnswer, error) {
	out := new(UserAnswer)
	err := c.cc.Invoke(ctx, "/proto.TracertService/UserAnswerCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tracertServiceClient) TracerCreate(ctx context.Context, in *Tracer, opts ...grpc.CallOption) (*Tracer, error) {
	out := new(Tracer)
	err := c.cc.Invoke(ctx, "/proto.TracertService/TracerCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tracertServiceClient) GetTrace(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*TracerList, error) {
	out := new(TracerList)
	err := c.cc.Invoke(ctx, "/proto.TracertService/GetTrace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TracertServiceServer is the server API for TracertService service.
type TracertServiceServer interface {
	Login(context.Context, *LoginInput) (*User, error)
	QuestionList(context.Context, *QuestionGroupListInput) (*QuestionGroupList, error)
	AlumniRegistration(context.Context, *AlumniRegistrationInput) (*AlumniRegistrationInput, error)
	CertificateCreate(context.Context, *Certificate) (*Certificate, error)
	AlumniCreate(context.Context, *Alumni) (*Alumni, error)
	AlumniList(*ListInput, TracertService_AlumniListServer) error
	AlumniGet(context.Context, *Alumni) (*Alumni, error)
	AlumniAppraiserCreate(context.Context, *AlumniAppraiser) (*AlumniAppraiser, error)
	AlumniAppraiserList(*ListInput, TracertService_AlumniAppraiserListServer) error
	AlumniAppraiserGet(context.Context, *AlumniAppraiser) (*AlumniAppraiser, error)
	// rpc AlumniAppraiserUpdate(AlumniAppraiser) returns (AlumniAppraiser) {}
	//
	UserCreate(context.Context, *User) (*User, error)
	UserList(*ListInput, TracertService_UserListServer) error
	UserGet(context.Context, *User) (*User, error)
	LegalizeUpload(context.Context, *Legalize) (*Legalize, error)
	LegalizeList(*ListInput, TracertService_LegalizeListServer) error
	LegalizeGet(context.Context, *Legalize) (*Legalize, error)
	LegalizeGetOwn(context.Context, *EmptyMessage) (*Certificates, error)
	LegalizeDone(context.Context, *Legalize) (*Legalize, error)
	LegalizeVerified(context.Context, *UintMessage) (*Legalize, error)
	LegalizeRejected(context.Context, *UintMessage) (*Legalize, error)
	LegalizeApproved(context.Context, *UintMessage) (*Legalize, error)
	LegalizeRating(context.Context, *Legalize) (*StringMessage, error)
	UserAnswerCreate(context.Context, *UserAnswer) (*UserAnswer, error)
	TracerCreate(context.Context, *Tracer) (*Tracer, error)
	GetTrace(context.Context, *EmptyMessage) (*TracerList, error)
}

// UnimplementedTracertServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTracertServiceServer struct {
}

func (*UnimplementedTracertServiceServer) Login(context.Context, *LoginInput) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedTracertServiceServer) QuestionList(context.Context, *QuestionGroupListInput) (*QuestionGroupList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuestionList not implemented")
}
func (*UnimplementedTracertServiceServer) AlumniRegistration(context.Context, *AlumniRegistrationInput) (*AlumniRegistrationInput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlumniRegistration not implemented")
}
func (*UnimplementedTracertServiceServer) CertificateCreate(context.Context, *Certificate) (*Certificate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CertificateCreate not implemented")
}
func (*UnimplementedTracertServiceServer) AlumniCreate(context.Context, *Alumni) (*Alumni, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlumniCreate not implemented")
}
func (*UnimplementedTracertServiceServer) AlumniList(*ListInput, TracertService_AlumniListServer) error {
	return status.Errorf(codes.Unimplemented, "method AlumniList not implemented")
}
func (*UnimplementedTracertServiceServer) AlumniGet(context.Context, *Alumni) (*Alumni, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlumniGet not implemented")
}
func (*UnimplementedTracertServiceServer) AlumniAppraiserCreate(context.Context, *AlumniAppraiser) (*AlumniAppraiser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlumniAppraiserCreate not implemented")
}
func (*UnimplementedTracertServiceServer) AlumniAppraiserList(*ListInput, TracertService_AlumniAppraiserListServer) error {
	return status.Errorf(codes.Unimplemented, "method AlumniAppraiserList not implemented")
}
func (*UnimplementedTracertServiceServer) AlumniAppraiserGet(context.Context, *AlumniAppraiser) (*AlumniAppraiser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlumniAppraiserGet not implemented")
}
func (*UnimplementedTracertServiceServer) UserCreate(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCreate not implemented")
}
func (*UnimplementedTracertServiceServer) UserList(*ListInput, TracertService_UserListServer) error {
	return status.Errorf(codes.Unimplemented, "method UserList not implemented")
}
func (*UnimplementedTracertServiceServer) UserGet(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGet not implemented")
}
func (*UnimplementedTracertServiceServer) LegalizeUpload(context.Context, *Legalize) (*Legalize, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LegalizeUpload not implemented")
}
func (*UnimplementedTracertServiceServer) LegalizeList(*ListInput, TracertService_LegalizeListServer) error {
	return status.Errorf(codes.Unimplemented, "method LegalizeList not implemented")
}
func (*UnimplementedTracertServiceServer) LegalizeGet(context.Context, *Legalize) (*Legalize, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LegalizeGet not implemented")
}
func (*UnimplementedTracertServiceServer) LegalizeGetOwn(context.Context, *EmptyMessage) (*Certificates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LegalizeGetOwn not implemented")
}
func (*UnimplementedTracertServiceServer) LegalizeDone(context.Context, *Legalize) (*Legalize, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LegalizeDone not implemented")
}
func (*UnimplementedTracertServiceServer) LegalizeVerified(context.Context, *UintMessage) (*Legalize, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LegalizeVerified not implemented")
}
func (*UnimplementedTracertServiceServer) LegalizeRejected(context.Context, *UintMessage) (*Legalize, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LegalizeRejected not implemented")
}
func (*UnimplementedTracertServiceServer) LegalizeApproved(context.Context, *UintMessage) (*Legalize, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LegalizeApproved not implemented")
}
func (*UnimplementedTracertServiceServer) LegalizeRating(context.Context, *Legalize) (*StringMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LegalizeRating not implemented")
}
func (*UnimplementedTracertServiceServer) UserAnswerCreate(context.Context, *UserAnswer) (*UserAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAnswerCreate not implemented")
}
func (*UnimplementedTracertServiceServer) TracerCreate(context.Context, *Tracer) (*Tracer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TracerCreate not implemented")
}
func (*UnimplementedTracertServiceServer) GetTrace(context.Context, *EmptyMessage) (*TracerList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrace not implemented")
}

func RegisterTracertServiceServer(s *grpc.Server, srv TracertServiceServer) {
	s.RegisterService(&_TracertService_serviceDesc, srv)
}

func _TracertService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TracertServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TracertService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TracertServiceServer).Login(ctx, req.(*LoginInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _TracertService_QuestionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionGroupListInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TracertServiceServer).QuestionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TracertService/QuestionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TracertServiceServer).QuestionList(ctx, req.(*QuestionGroupListInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _TracertService_AlumniRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlumniRegistrationInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TracertServiceServer).AlumniRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TracertService/AlumniRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TracertServiceServer).AlumniRegistration(ctx, req.(*AlumniRegistrationInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _TracertService_CertificateCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Certificate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TracertServiceServer).CertificateCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TracertService/CertificateCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TracertServiceServer).CertificateCreate(ctx, req.(*Certificate))
	}
	return interceptor(ctx, in, info, handler)
}

func _TracertService_AlumniCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Alumni)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TracertServiceServer).AlumniCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TracertService/AlumniCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TracertServiceServer).AlumniCreate(ctx, req.(*Alumni))
	}
	return interceptor(ctx, in, info, handler)
}

func _TracertService_AlumniList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TracertServiceServer).AlumniList(m, &tracertServiceAlumniListServer{stream})
}

type TracertService_AlumniListServer interface {
	Send(*AlumniListResponse) error
	grpc.ServerStream
}

type tracertServiceAlumniListServer struct {
	grpc.ServerStream
}

func (x *tracertServiceAlumniListServer) Send(m *AlumniListResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TracertService_AlumniGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Alumni)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TracertServiceServer).AlumniGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TracertService/AlumniGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TracertServiceServer).AlumniGet(ctx, req.(*Alumni))
	}
	return interceptor(ctx, in, info, handler)
}

func _TracertService_AlumniAppraiserCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlumniAppraiser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TracertServiceServer).AlumniAppraiserCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TracertService/AlumniAppraiserCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TracertServiceServer).AlumniAppraiserCreate(ctx, req.(*AlumniAppraiser))
	}
	return interceptor(ctx, in, info, handler)
}

func _TracertService_AlumniAppraiserList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TracertServiceServer).AlumniAppraiserList(m, &tracertServiceAlumniAppraiserListServer{stream})
}

type TracertService_AlumniAppraiserListServer interface {
	Send(*AlumniAppraiserListResponse) error
	grpc.ServerStream
}

type tracertServiceAlumniAppraiserListServer struct {
	grpc.ServerStream
}

func (x *tracertServiceAlumniAppraiserListServer) Send(m *AlumniAppraiserListResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TracertService_AlumniAppraiserGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlumniAppraiser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TracertServiceServer).AlumniAppraiserGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TracertService/AlumniAppraiserGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TracertServiceServer).AlumniAppraiserGet(ctx, req.(*AlumniAppraiser))
	}
	return interceptor(ctx, in, info, handler)
}

func _TracertService_UserCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TracertServiceServer).UserCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TracertService/UserCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TracertServiceServer).UserCreate(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _TracertService_UserList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TracertServiceServer).UserList(m, &tracertServiceUserListServer{stream})
}

type TracertService_UserListServer interface {
	Send(*UserListResponse) error
	grpc.ServerStream
}

type tracertServiceUserListServer struct {
	grpc.ServerStream
}

func (x *tracertServiceUserListServer) Send(m *UserListResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TracertService_UserGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TracertServiceServer).UserGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TracertService/UserGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TracertServiceServer).UserGet(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _TracertService_LegalizeUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Legalize)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TracertServiceServer).LegalizeUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TracertService/LegalizeUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TracertServiceServer).LegalizeUpload(ctx, req.(*Legalize))
	}
	return interceptor(ctx, in, info, handler)
}

func _TracertService_LegalizeList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListInput)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TracertServiceServer).LegalizeList(m, &tracertServiceLegalizeListServer{stream})
}

type TracertService_LegalizeListServer interface {
	Send(*LegalizeListResponse) error
	grpc.ServerStream
}

type tracertServiceLegalizeListServer struct {
	grpc.ServerStream
}

func (x *tracertServiceLegalizeListServer) Send(m *LegalizeListResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TracertService_LegalizeGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Legalize)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TracertServiceServer).LegalizeGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TracertService/LegalizeGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TracertServiceServer).LegalizeGet(ctx, req.(*Legalize))
	}
	return interceptor(ctx, in, info, handler)
}

func _TracertService_LegalizeGetOwn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TracertServiceServer).LegalizeGetOwn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TracertService/LegalizeGetOwn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TracertServiceServer).LegalizeGetOwn(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TracertService_LegalizeDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Legalize)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TracertServiceServer).LegalizeDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TracertService/LegalizeDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TracertServiceServer).LegalizeDone(ctx, req.(*Legalize))
	}
	return interceptor(ctx, in, info, handler)
}

func _TracertService_LegalizeVerified_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UintMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TracertServiceServer).LegalizeVerified(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TracertService/LegalizeVerified",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TracertServiceServer).LegalizeVerified(ctx, req.(*UintMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TracertService_LegalizeRejected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UintMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TracertServiceServer).LegalizeRejected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TracertService/LegalizeRejected",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TracertServiceServer).LegalizeRejected(ctx, req.(*UintMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TracertService_LegalizeApproved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UintMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TracertServiceServer).LegalizeApproved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TracertService/LegalizeApproved",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TracertServiceServer).LegalizeApproved(ctx, req.(*UintMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _TracertService_LegalizeRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Legalize)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TracertServiceServer).LegalizeRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TracertService/LegalizeRating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TracertServiceServer).LegalizeRating(ctx, req.(*Legalize))
	}
	return interceptor(ctx, in, info, handler)
}

func _TracertService_UserAnswerCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAnswer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TracertServiceServer).UserAnswerCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TracertService/UserAnswerCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TracertServiceServer).UserAnswerCreate(ctx, req.(*UserAnswer))
	}
	return interceptor(ctx, in, info, handler)
}

func _TracertService_TracerCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tracer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TracertServiceServer).TracerCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TracertService/TracerCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TracertServiceServer).TracerCreate(ctx, req.(*Tracer))
	}
	return interceptor(ctx, in, info, handler)
}

func _TracertService_GetTrace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TracertServiceServer).GetTrace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TracertService/GetTrace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TracertServiceServer).GetTrace(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _TracertService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TracertService",
	HandlerType: (*TracertServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _TracertService_Login_Handler,
		},
		{
			MethodName: "QuestionList",
			Handler:    _TracertService_QuestionList_Handler,
		},
		{
			MethodName: "AlumniRegistration",
			Handler:    _TracertService_AlumniRegistration_Handler,
		},
		{
			MethodName: "CertificateCreate",
			Handler:    _TracertService_CertificateCreate_Handler,
		},
		{
			MethodName: "AlumniCreate",
			Handler:    _TracertService_AlumniCreate_Handler,
		},
		{
			MethodName: "AlumniGet",
			Handler:    _TracertService_AlumniGet_Handler,
		},
		{
			MethodName: "AlumniAppraiserCreate",
			Handler:    _TracertService_AlumniAppraiserCreate_Handler,
		},
		{
			MethodName: "AlumniAppraiserGet",
			Handler:    _TracertService_AlumniAppraiserGet_Handler,
		},
		{
			MethodName: "UserCreate",
			Handler:    _TracertService_UserCreate_Handler,
		},
		{
			MethodName: "UserGet",
			Handler:    _TracertService_UserGet_Handler,
		},
		{
			MethodName: "LegalizeUpload",
			Handler:    _TracertService_LegalizeUpload_Handler,
		},
		{
			MethodName: "LegalizeGet",
			Handler:    _TracertService_LegalizeGet_Handler,
		},
		{
			MethodName: "LegalizeGetOwn",
			Handler:    _TracertService_LegalizeGetOwn_Handler,
		},
		{
			MethodName: "LegalizeDone",
			Handler:    _TracertService_LegalizeDone_Handler,
		},
		{
			MethodName: "LegalizeVerified",
			Handler:    _TracertService_LegalizeVerified_Handler,
		},
		{
			MethodName: "LegalizeRejected",
			Handler:    _TracertService_LegalizeRejected_Handler,
		},
		{
			MethodName: "LegalizeApproved",
			Handler:    _TracertService_LegalizeApproved_Handler,
		},
		{
			MethodName: "LegalizeRating",
			Handler:    _TracertService_LegalizeRating_Handler,
		},
		{
			MethodName: "UserAnswerCreate",
			Handler:    _TracertService_UserAnswerCreate_Handler,
		},
		{
			MethodName: "TracerCreate",
			Handler:    _TracertService_TracerCreate_Handler,
		},
		{
			MethodName: "GetTrace",
			Handler:    _TracertService_GetTrace_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AlumniList",
			Handler:       _TracertService_AlumniList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AlumniAppraiserList",
			Handler:       _TracertService_AlumniAppraiserList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UserList",
			Handler:       _TracertService_UserList_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LegalizeList",
			Handler:       _TracertService_LegalizeList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tracert_service.proto",
}
